
q1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000104c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080011dc  080011dc  000021dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001250  08001250  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001250  08001250  00002250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001258  08001258  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001258  08001258  00002258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800125c  0800125c  0000225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001260  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015bb  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000663  00000000  00000000  00004639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00004ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d0  00000000  00000000  00004dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018420  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001abf  00000000  00000000  0001d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdfc  00000000  00000000  0001ed87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aab83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000085c  00000000  00000000  000aabc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ab424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000044  00000000  00000000  000ab443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080011c4 	.word	0x080011c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080011c4 	.word	0x080011c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000278:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <DelayMs+0x44>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800027e:	4b0e      	ldr	r3, [pc, #56]	@ (80002b8 <DelayMs+0x48>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a0e      	ldr	r2, [pc, #56]	@ (80002bc <DelayMs+0x4c>)
 8000284:	fba2 2303 	umull	r2, r3, r2, r3
 8000288:	099b      	lsrs	r3, r3, #6
 800028a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	fb02 f303 	mul.w	r3, r2, r3
 8000294:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <DelayMs+0x44>)
 800029a:	685a      	ldr	r2, [r3, #4]
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	1ad2      	subs	r2, r2, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <DelayMs+0x28>
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e0001000 	.word	0xe0001000
 80002b8:	20000000 	.word	0x20000000
 80002bc:	10624dd3 	.word	0x10624dd3

080002c0 <main>:
#include "uart.h"
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	b097      	sub	sp, #92	@ 0x5c
 80002c4:	af04      	add	r7, sp, #16
	char str[64];
	SystemInit();
 80002c6:	f000 f9ef 	bl	80006a8 <SystemInit>
	UartInit(9600);
 80002ca:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80002ce:	f000 fa21 	bl	8000714 <UartInit>
	UartPuts("STM32 RTC Demo!!\r\n");
 80002d2:	4820      	ldr	r0, [pc, #128]	@ (8000354 <main+0x94>)
 80002d4:	f000 fa98 	bl	8000808 <UartPuts>
	RTC_Date dt = { .Date = 28, .Month = 02, .Year = 24};
 80002d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000358 <main+0x98>)
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	6812      	ldr	r2, [r2, #0]
 80002de:	4611      	mov	r1, r2
 80002e0:	8019      	strh	r1, [r3, #0]
 80002e2:	3302      	adds	r3, #2
 80002e4:	0c12      	lsrs	r2, r2, #16
 80002e6:	701a      	strb	r2, [r3, #0]
	RTC_Time tm = { .Hour = 23, .Minute = 59, .Second = 50 };
 80002e8:	4a1c      	ldr	r2, [pc, #112]	@ (800035c <main+0x9c>)
 80002ea:	463b      	mov	r3, r7
 80002ec:	6812      	ldr	r2, [r2, #0]
 80002ee:	4611      	mov	r1, r2
 80002f0:	8019      	strh	r1, [r3, #0]
 80002f2:	3302      	adds	r3, #2
 80002f4:	0c12      	lsrs	r2, r2, #16
 80002f6:	701a      	strb	r2, [r3, #0]
	RTC_Init(&dt, &tm);
 80002f8:	463a      	mov	r2, r7
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4611      	mov	r1, r2
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 f87e 	bl	8000400 <RTC_Init>
	while(1) {
		RTC_GetDate(&dt);
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4618      	mov	r0, r3
 8000308:	f000 f92c 	bl	8000564 <RTC_GetDate>
		RTC_GetTime(&tm);
 800030c:	463b      	mov	r3, r7
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f95e 	bl	80005d0 <RTC_GetTime>
		sprintf(str, "%02d-%02d-20%02d  %02d:%02d:%02d\r\n",
				dt.Date, dt.Month, dt.Year,
 8000314:	793b      	ldrb	r3, [r7, #4]
		sprintf(str, "%02d-%02d-20%02d  %02d:%02d:%02d\r\n",
 8000316:	461d      	mov	r5, r3
				dt.Date, dt.Month, dt.Year,
 8000318:	797b      	ldrb	r3, [r7, #5]
		sprintf(str, "%02d-%02d-20%02d  %02d:%02d:%02d\r\n",
 800031a:	461e      	mov	r6, r3
				dt.Date, dt.Month, dt.Year,
 800031c:	79bb      	ldrb	r3, [r7, #6]
				tm.Hour, tm.Minute, tm.Second);
 800031e:	783a      	ldrb	r2, [r7, #0]
 8000320:	7879      	ldrb	r1, [r7, #1]
 8000322:	78b8      	ldrb	r0, [r7, #2]
		sprintf(str, "%02d-%02d-20%02d  %02d:%02d:%02d\r\n",
 8000324:	4604      	mov	r4, r0
 8000326:	f107 0008 	add.w	r0, r7, #8
 800032a:	9403      	str	r4, [sp, #12]
 800032c:	9102      	str	r1, [sp, #8]
 800032e:	9201      	str	r2, [sp, #4]
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	4633      	mov	r3, r6
 8000334:	462a      	mov	r2, r5
 8000336:	490a      	ldr	r1, [pc, #40]	@ (8000360 <main+0xa0>)
 8000338:	f000 faac 	bl	8000894 <siprintf>
		UartPuts(str);
 800033c:	f107 0308 	add.w	r3, r7, #8
 8000340:	4618      	mov	r0, r3
 8000342:	f000 fa61 	bl	8000808 <UartPuts>
		DelayMs(1000);
 8000346:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800034a:	f7ff ff91 	bl	8000270 <DelayMs>
		RTC_GetDate(&dt);
 800034e:	bf00      	nop
 8000350:	e7d8      	b.n	8000304 <main+0x44>
 8000352:	bf00      	nop
 8000354:	080011dc 	.word	0x080011dc
 8000358:	08001214 	.word	0x08001214
 800035c:	08001218 	.word	0x08001218
 8000360:	080011f0 	.word	0x080011f0

08000364 <Bcd2Bin>:


#include "rtc.h"

// input range = 0 to 99.
uint16_t Bcd2Bin(uint16_t bcd) {
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
	uint16_t units = bcd & 0x000F;
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	f003 030f 	and.w	r3, r3, #15
 8000374:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = (bcd >> 4) & 0x000F;
 8000376:	88fb      	ldrh	r3, [r7, #6]
 8000378:	091b      	lsrs	r3, r3, #4
 800037a:	b29b      	uxth	r3, r3
 800037c:	f003 030f 	and.w	r3, r3, #15
 8000380:	81bb      	strh	r3, [r7, #12]
	uint16_t bin = tens * 10 + units;
 8000382:	89bb      	ldrh	r3, [r7, #12]
 8000384:	461a      	mov	r2, r3
 8000386:	0092      	lsls	r2, r2, #2
 8000388:	4413      	add	r3, r2
 800038a:	005b      	lsls	r3, r3, #1
 800038c:	b29a      	uxth	r2, r3
 800038e:	89fb      	ldrh	r3, [r7, #14]
 8000390:	4413      	add	r3, r2
 8000392:	817b      	strh	r3, [r7, #10]
	return bin;
 8000394:	897b      	ldrh	r3, [r7, #10]
}
 8000396:	4618      	mov	r0, r3
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <Bin2Bcd>:

// input range = 0 to 99.
uint16_t Bin2Bcd(uint16_t bin) {
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	80fb      	strh	r3, [r7, #6]
	uint16_t units = bin % 10;
 80003aa:	88fa      	ldrh	r2, [r7, #6]
 80003ac:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <Bin2Bcd+0x5c>)
 80003ae:	fba3 1302 	umull	r1, r3, r3, r2
 80003b2:	08d9      	lsrs	r1, r3, #3
 80003b4:	460b      	mov	r3, r1
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	440b      	add	r3, r1
 80003ba:	005b      	lsls	r3, r3, #1
 80003bc:	1ad3      	subs	r3, r2, r3
 80003be:	81fb      	strh	r3, [r7, #14]
	uint16_t tens = (bin / 10) % 10;
 80003c0:	88fb      	ldrh	r3, [r7, #6]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	@ (80003fc <Bin2Bcd+0x5c>)
 80003c4:	fba2 2303 	umull	r2, r3, r2, r3
 80003c8:	08db      	lsrs	r3, r3, #3
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <Bin2Bcd+0x5c>)
 80003ce:	fba3 1302 	umull	r1, r3, r3, r2
 80003d2:	08d9      	lsrs	r1, r3, #3
 80003d4:	460b      	mov	r3, r1
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	440b      	add	r3, r1
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	81bb      	strh	r3, [r7, #12]
	uint16_t bcd = (tens << 4) | units;
 80003e0:	89bb      	ldrh	r3, [r7, #12]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	b21a      	sxth	r2, r3
 80003e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b21b      	sxth	r3, r3
 80003ee:	817b      	strh	r3, [r7, #10]
	return bcd;
 80003f0:	897b      	ldrh	r3, [r7, #10]
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr
 80003fc:	cccccccd 	.word	0xcccccccd

08000400 <RTC_Init>:

void RTC_Init(RTC_Date *dt, RTC_Time *tm) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
	//* enable peripheral clock power
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800040a:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <RTC_Init+0xac>)
 800040c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800040e:	4a27      	ldr	r2, [pc, #156]	@ (80004ac <RTC_Init+0xac>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000414:	6413      	str	r3, [r2, #64]	@ 0x40
	//* enable access to the RTC registers in PWR control (stm32 manual 5.4)
	PWR->CR |= PWR_CR_DBP;
 8000416:	4b26      	ldr	r3, [pc, #152]	@ (80004b0 <RTC_Init+0xb0>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a25      	ldr	r2, [pc, #148]	@ (80004b0 <RTC_Init+0xb0>)
 800041c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000420:	6013      	str	r3, [r2, #0]
	//* enable LSI in RCC CSR (stm32 manual 7.3.21)
	RCC->CSR |= RCC_CSR_LSION;
 8000422:	4b22      	ldr	r3, [pc, #136]	@ (80004ac <RTC_Init+0xac>)
 8000424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000426:	4a21      	ldr	r2, [pc, #132]	@ (80004ac <RTC_Init+0xac>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6753      	str	r3, [r2, #116]	@ 0x74
	//* wait for LSI ready flag
	while(!(RCC->CSR & RCC_CSR_LSIRDY));
 800042e:	bf00      	nop
 8000430:	4b1e      	ldr	r3, [pc, #120]	@ (80004ac <RTC_Init+0xac>)
 8000432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000434:	f003 0302 	and.w	r3, r3, #2
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f9      	beq.n	8000430 <RTC_Init+0x30>
	//* select LSI (32 KHz) and enable RTC in RCC (BDCR) (stm32 manual 7.3.21)
	RCC->BDCR |= RCC_BDCR_RTCSEL_1 | RCC_BDCR_RTCEN;
 800043c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ac <RTC_Init+0xac>)
 800043e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000440:	4a1a      	ldr	r2, [pc, #104]	@ (80004ac <RTC_Init+0xac>)
 8000442:	f443 4302 	orr.w	r3, r3, #33280	@ 0x8200
 8000446:	6713      	str	r3, [r2, #112]	@ 0x70
	//* enter key to unlock write protection. key sequence must be 0xCA and then 0x53 (stm32 manual 26.3.5)
	RTC->WPR = 0xCA;
 8000448:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <RTC_Init+0xb4>)
 800044a:	22ca      	movs	r2, #202	@ 0xca
 800044c:	625a      	str	r2, [r3, #36]	@ 0x24
	RTC->WPR = 0x53;
 800044e:	4b19      	ldr	r3, [pc, #100]	@ (80004b4 <RTC_Init+0xb4>)
 8000450:	2253      	movs	r2, #83	@ 0x53
 8000452:	625a      	str	r2, [r3, #36]	@ 0x24
	//* enable rtc setup in RTC ISR (i.e. register init)
	RTC->ISR |= RTC_ISR_INIT;
 8000454:	4b17      	ldr	r3, [pc, #92]	@ (80004b4 <RTC_Init+0xb4>)
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	4a16      	ldr	r2, [pc, #88]	@ (80004b4 <RTC_Init+0xb4>)
 800045a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800045e:	60d3      	str	r3, [r2, #12]
	//* wait until register update is allowed
	while(!(RTC->ISR & RTC_ISR_INITF));
 8000460:	bf00      	nop
 8000462:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <RTC_Init+0xb4>)
 8000464:	68db      	ldr	r3, [r3, #12]
 8000466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f9      	beq.n	8000462 <RTC_Init+0x62>
	//* set sync & async prescalar in RTC PRER
	// For 1 Hz internal clock and LSI = 32000 Hz,
	//	Async Prescalar = 128 (-1) and Sync Prescalar = 250 (-1)
	RTC->PRER = ((128-1) << RTC_PRER_PREDIV_A_Pos) | ((250-1) << RTC_PRER_PREDIV_S_Pos);
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <RTC_Init+0xb4>)
 8000470:	4a11      	ldr	r2, [pc, #68]	@ (80004b8 <RTC_Init+0xb8>)
 8000472:	611a      	str	r2, [r3, #16]
	//* set initial date and time
	RTC_SetDate(dt);
 8000474:	6878      	ldr	r0, [r7, #4]
 8000476:	f000 f821 	bl	80004bc <RTC_SetDate>
	RTC_SetTime(tm);
 800047a:	6838      	ldr	r0, [r7, #0]
 800047c:	f000 f848 	bl	8000510 <RTC_SetTime>
	//* rtc date/time should be read from calendar registers (not shadow registers) (RTC CR)
	RTC->CR |= RTC_CR_BYPSHAD;
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <RTC_Init+0xb4>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	4a0b      	ldr	r2, [pc, #44]	@ (80004b4 <RTC_Init+0xb4>)
 8000486:	f043 0320 	orr.w	r3, r3, #32
 800048a:	6093      	str	r3, [r2, #8]
	//* start rtc in free running mode (RTC ISR)
	RTC->ISR &= ~RTC_ISR_INIT;
 800048c:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <RTC_Init+0xb4>)
 800048e:	68db      	ldr	r3, [r3, #12]
 8000490:	4a08      	ldr	r2, [pc, #32]	@ (80004b4 <RTC_Init+0xb4>)
 8000492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000496:	60d3      	str	r3, [r2, #12]
	//* disable access to RTC registers (write protection) in PWR control
	PWR->CR &= ~PWR_CR_DBP;
 8000498:	4b05      	ldr	r3, [pc, #20]	@ (80004b0 <RTC_Init+0xb0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a04      	ldr	r2, [pc, #16]	@ (80004b0 <RTC_Init+0xb0>)
 800049e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004a2:	6013      	str	r3, [r2, #0]
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40023800 	.word	0x40023800
 80004b0:	40007000 	.word	0x40007000
 80004b4:	40002800 	.word	0x40002800
 80004b8:	007f00f9 	.word	0x007f00f9

080004bc <RTC_SetDate>:

void RTC_SetDate(RTC_Date *dt) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	uint16_t date = Bin2Bcd(dt->Date);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff69 	bl	80003a0 <Bin2Bcd>
 80004ce:	4603      	mov	r3, r0
 80004d0:	82fb      	strh	r3, [r7, #22]
	uint16_t mon = Bin2Bcd(dt->Month);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	785b      	ldrb	r3, [r3, #1]
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff ff62 	bl	80003a0 <Bin2Bcd>
 80004dc:	4603      	mov	r3, r0
 80004de:	82bb      	strh	r3, [r7, #20]
	uint16_t yr = Bin2Bcd(dt->Year);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	789b      	ldrb	r3, [r3, #2]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff5b 	bl	80003a0 <Bin2Bcd>
 80004ea:	4603      	mov	r3, r0
 80004ec:	827b      	strh	r3, [r7, #18]
	uint32_t dr = ((uint32_t)date << RTC_DR_DU_Pos)
 80004ee:	8afa      	ldrh	r2, [r7, #22]
			| ((uint32_t)mon << RTC_DR_MU_Pos)
 80004f0:	8abb      	ldrh	r3, [r7, #20]
 80004f2:	021b      	lsls	r3, r3, #8
 80004f4:	431a      	orrs	r2, r3
			| ((uint32_t)yr << RTC_DR_YU_Pos);
 80004f6:	8a7b      	ldrh	r3, [r7, #18]
 80004f8:	041b      	lsls	r3, r3, #16
	uint32_t dr = ((uint32_t)date << RTC_DR_DU_Pos)
 80004fa:	4313      	orrs	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
	RTC->DR = dr;
 80004fe:	4a03      	ldr	r2, [pc, #12]	@ (800050c <RTC_SetDate+0x50>)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	6053      	str	r3, [r2, #4]
}
 8000504:	bf00      	nop
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40002800 	.word	0x40002800

08000510 <RTC_SetTime>:

void RTC_SetTime(RTC_Time *tm) {
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	uint16_t hr = Bin2Bcd(tm->Hour);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ff3f 	bl	80003a0 <Bin2Bcd>
 8000522:	4603      	mov	r3, r0
 8000524:	82fb      	strh	r3, [r7, #22]
	uint16_t min = Bin2Bcd(tm->Minute);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	785b      	ldrb	r3, [r3, #1]
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff38 	bl	80003a0 <Bin2Bcd>
 8000530:	4603      	mov	r3, r0
 8000532:	82bb      	strh	r3, [r7, #20]
	uint16_t sec = Bin2Bcd(tm->Second);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	789b      	ldrb	r3, [r3, #2]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff ff31 	bl	80003a0 <Bin2Bcd>
 800053e:	4603      	mov	r3, r0
 8000540:	827b      	strh	r3, [r7, #18]
	uint32_t tr = ((uint32_t)hr << RTC_TR_HU_Pos)
 8000542:	8afb      	ldrh	r3, [r7, #22]
 8000544:	041a      	lsls	r2, r3, #16
			| ((uint32_t)min << RTC_TR_MNU_Pos)
 8000546:	8abb      	ldrh	r3, [r7, #20]
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	431a      	orrs	r2, r3
			| ((uint32_t)sec << RTC_TR_SU_Pos);
 800054c:	8a7b      	ldrh	r3, [r7, #18]
	uint32_t tr = ((uint32_t)hr << RTC_TR_HU_Pos)
 800054e:	4313      	orrs	r3, r2
 8000550:	60fb      	str	r3, [r7, #12]
	RTC->TR = tr;
 8000552:	4a03      	ldr	r2, [pc, #12]	@ (8000560 <RTC_SetTime+0x50>)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	6013      	str	r3, [r2, #0]
}
 8000558:	bf00      	nop
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	40002800 	.word	0x40002800

08000564 <RTC_GetDate>:

void RTC_GetDate(RTC_Date *dt) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	uint32_t dr = RTC->DR;
 800056c:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <RTC_GetDate+0x68>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	617b      	str	r3, [r7, #20]
	uint16_t year = (dr & (RTC_DR_YT_Msk|RTC_DR_YU_Msk)) >> RTC_DR_YU_Pos;
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	0c1b      	lsrs	r3, r3, #16
 8000576:	b29b      	uxth	r3, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	827b      	strh	r3, [r7, #18]
	uint16_t mon = (dr & (RTC_DR_MT_Msk|RTC_DR_MU_Msk)) >> RTC_DR_MU_Pos;
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	0a1b      	lsrs	r3, r3, #8
 8000580:	b29b      	uxth	r3, r3
 8000582:	f003 031f 	and.w	r3, r3, #31
 8000586:	823b      	strh	r3, [r7, #16]
	uint16_t date = (dr & (RTC_DR_DT_Msk|RTC_DR_DU_Msk)) >> RTC_DR_DU_Pos;
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	b29b      	uxth	r3, r3
 800058c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000590:	81fb      	strh	r3, [r7, #14]

	dt->Year = Bcd2Bin(year);
 8000592:	8a7b      	ldrh	r3, [r7, #18]
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff fee5 	bl	8000364 <Bcd2Bin>
 800059a:	4603      	mov	r3, r0
 800059c:	b2da      	uxtb	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	709a      	strb	r2, [r3, #2]
	dt->Month = Bcd2Bin(mon);
 80005a2:	8a3b      	ldrh	r3, [r7, #16]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fedd 	bl	8000364 <Bcd2Bin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	705a      	strb	r2, [r3, #1]
	dt->Date = Bcd2Bin(date);
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fed5 	bl	8000364 <Bcd2Bin>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	701a      	strb	r2, [r3, #0]

}
 80005c2:	bf00      	nop
 80005c4:	3718      	adds	r7, #24
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40002800 	.word	0x40002800

080005d0 <RTC_GetTime>:

void RTC_GetTime(RTC_Time *tm) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	uint32_t tr = RTC->TR;
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <RTC_GetTime+0x68>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	617b      	str	r3, [r7, #20]
	uint16_t hr = (tr & (RTC_TR_HT_Msk|RTC_TR_HU_Msk)) >> RTC_TR_HU_Pos;
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	0c1b      	lsrs	r3, r3, #16
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80005e8:	827b      	strh	r3, [r7, #18]
	uint16_t min = (tr & (RTC_TR_MNT_Msk|RTC_TR_MNU_Msk)) >> RTC_TR_MNU_Pos;
 80005ea:	697b      	ldr	r3, [r7, #20]
 80005ec:	0a1b      	lsrs	r3, r3, #8
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005f4:	823b      	strh	r3, [r7, #16]
	uint16_t sec = (tr & (RTC_TR_ST_Msk|RTC_TR_SU_Msk)) >> RTC_TR_SU_Pos;
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	b29b      	uxth	r3, r3
 80005fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80005fe:	81fb      	strh	r3, [r7, #14]
	tm->Hour = Bcd2Bin(hr);
 8000600:	8a7b      	ldrh	r3, [r7, #18]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff feae 	bl	8000364 <Bcd2Bin>
 8000608:	4603      	mov	r3, r0
 800060a:	b2da      	uxtb	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	701a      	strb	r2, [r3, #0]
	tm->Minute = Bcd2Bin(min);
 8000610:	8a3b      	ldrh	r3, [r7, #16]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fea6 	bl	8000364 <Bcd2Bin>
 8000618:	4603      	mov	r3, r0
 800061a:	b2da      	uxtb	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	705a      	strb	r2, [r3, #1]
	tm->Second = Bcd2Bin(sec);
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fe9e 	bl	8000364 <Bcd2Bin>
 8000628:	4603      	mov	r3, r0
 800062a:	b2da      	uxtb	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	709a      	strb	r2, [r3, #2]
}
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40002800 	.word	0x40002800

0800063c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <_sbrk+0x5c>)
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <_sbrk+0x60>)
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <_sbrk+0x64>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d102      	bne.n	800065e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <_sbrk+0x64>)
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <_sbrk+0x68>)
 800065c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <_sbrk+0x64>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4413      	add	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	429a      	cmp	r2, r3
 800066a:	d207      	bcs.n	800067c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800066c:	f000 f932 	bl	80008d4 <__errno>
 8000670:	4603      	mov	r3, r0
 8000672:	220c      	movs	r2, #12
 8000674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800067a:	e009      	b.n	8000690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000682:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <_sbrk+0x64>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	4a05      	ldr	r2, [pc, #20]	@ (80006a0 <_sbrk+0x64>)
 800068c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068e:	68fb      	ldr	r3, [r7, #12]
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20020000 	.word	0x20020000
 800069c:	00000400 	.word	0x00000400
 80006a0:	20000070 	.word	0x20000070
 80006a4:	200001c0 	.word	0x200001c0

080006a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  DWT_Init();
 80006ac:	f000 f802 	bl	80006b4 <DWT_Init>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80006b8:	4b14      	ldr	r3, [pc, #80]	@ (800070c <DWT_Init+0x58>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a13      	ldr	r2, [pc, #76]	@ (800070c <DWT_Init+0x58>)
 80006be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006c2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <DWT_Init+0x58>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	4a10      	ldr	r2, [pc, #64]	@ (800070c <DWT_Init+0x58>)
 80006ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006ce:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <DWT_Init+0x5c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <DWT_Init+0x5c>)
 80006d6:	f023 0301 	bic.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <DWT_Init+0x5c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000710 <DWT_Init+0x5c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <DWT_Init+0x5c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80006ee:	bf00      	nop
    __ASM volatile ("NOP");
 80006f0:	bf00      	nop
    __ASM volatile ("NOP");
 80006f2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <DWT_Init+0x5c>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	bf0c      	ite	eq
 80006fc:	2301      	moveq	r3, #1
 80006fe:	2300      	movne	r3, #0
 8000700:	b2db      	uxtb	r3, r3
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000edf0 	.word	0xe000edf0
 8000710:	e0001000 	.word	0xe0001000

08000714 <UartInit>:
#include "uart.h"

void UartInit(uint32_t baud) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	// enable gpio clock -- AHB1ENR.0
	RCC->AHB1ENR |= BV(GPIO_UART_CLKEN);
 800071c:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <UartInit+0xb8>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000720:	4a2a      	ldr	r2, [pc, #168]	@ (80007cc <UartInit+0xb8>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pins to alt fn 7 (AF7) -- AFRL = 0111
	GPIO_UART->AFR[0] |= BV(14) | BV(13) | BV(12) | BV(10) | BV(9) | BV(8);
 8000728:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <UartInit+0xbc>)
 800072a:	6a1b      	ldr	r3, [r3, #32]
 800072c:	4a28      	ldr	r2, [pc, #160]	@ (80007d0 <UartInit+0xbc>)
 800072e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000732:	6213      	str	r3, [r2, #32]
	GPIO_UART->AFR[0] &= ~(BV(15) | BV(11));
 8000734:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <UartInit+0xbc>)
 8000736:	6a1b      	ldr	r3, [r3, #32]
 8000738:	4a25      	ldr	r2, [pc, #148]	@ (80007d0 <UartInit+0xbc>)
 800073a:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 800073e:	6213      	str	r3, [r2, #32]
	// set gpio pins mode to alt fn	-- MODER = 10
	GPIO_UART->MODER &= ~(BV(UART_TX_PIN*2) | BV(UART_RX_PIN*2));
 8000740:	4b23      	ldr	r3, [pc, #140]	@ (80007d0 <UartInit+0xbc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a22      	ldr	r2, [pc, #136]	@ (80007d0 <UartInit+0xbc>)
 8000746:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800074a:	6013      	str	r3, [r2, #0]
	GPIO_UART->MODER |= (BV(UART_TX_PIN*2+1) | BV(UART_RX_PIN*2+1));
 800074c:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <UartInit+0xbc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a1f      	ldr	r2, [pc, #124]	@ (80007d0 <UartInit+0xbc>)
 8000752:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000756:	6013      	str	r3, [r2, #0]

	// enable uart clock -- APB1ENR.17
	RCC->APB1ENR |= BV(UART_CLKEN);
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <UartInit+0xb8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <UartInit+0xb8>)
 800075e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000762:	6413      	str	r3, [r2, #64]	@ 0x40
	// enable transmission and reception on uart
	UART->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 8000764:	4b1b      	ldr	r3, [pc, #108]	@ (80007d4 <UartInit+0xc0>)
 8000766:	220c      	movs	r2, #12
 8000768:	60da      	str	r2, [r3, #12]
	// set word length in CR1 -- M bit = 8-bit data len, Over8 = 0
	UART->CR1 &= ~(BV(USART_CR1_M_Pos) | BV(USART_CR1_OVER8_Pos));
 800076a:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <UartInit+0xc0>)
 800076c:	68db      	ldr	r3, [r3, #12]
 800076e:	4a19      	ldr	r2, [pc, #100]	@ (80007d4 <UartInit+0xc0>)
 8000770:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000774:	60d3      	str	r3, [r2, #12]
	// set stop bits in CR2 -- 1 stop bit
	UART->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <UartInit+0xc0>)
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <UartInit+0xc0>)
 800077c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000780:	6113      	str	r3, [r2, #16]
	// set baud rate -- UBRR
	if(baud == 9600)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000788:	d104      	bne.n	8000794 <UartInit+0x80>
		UART->BRR = UBRR_9600;
 800078a:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <UartInit+0xc0>)
 800078c:	f240 6283 	movw	r2, #1667	@ 0x683
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	e00f      	b.n	80007b4 <UartInit+0xa0>
	else if(baud == 38400)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800079a:	d104      	bne.n	80007a6 <UartInit+0x92>
		UART->BRR = UBRR_38400;
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <UartInit+0xc0>)
 800079e:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	e006      	b.n	80007b4 <UartInit+0xa0>
	else if(baud == 115200)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80007ac:	d102      	bne.n	80007b4 <UartInit+0xa0>
			UART->BRR = UBRR_115200;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <UartInit+0xc0>)
 80007b0:	228b      	movs	r2, #139	@ 0x8b
 80007b2:	609a      	str	r2, [r3, #8]
	// enable uart in CR1 -- UE bit
	UART->CR1 |= BV(USART_CR1_UE_Pos);
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <UartInit+0xc0>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4a06      	ldr	r2, [pc, #24]	@ (80007d4 <UartInit+0xc0>)
 80007ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007be:	60d3      	str	r3, [r2, #12]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020000 	.word	0x40020000
 80007d4:	40004400 	.word	0x40004400

080007d8 <UartPutch>:

void UartPutch(uint8_t ch) {
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	// write a byte in data register
	UART->DR = ch;
 80007e2:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <UartPutch+0x2c>)
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	6053      	str	r3, [r2, #4]
	// wait until TXE bit is 1 i.e. while TXE = 0
	while( (UART->SR & BV(USART_SR_TXE_Pos)) == 0)
 80007e8:	bf00      	nop
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <UartPutch+0x2c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f9      	beq.n	80007ea <UartPutch+0x12>
		;
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bc80      	pop	{r7}
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40004400 	.word	0x40004400

08000808 <UartPuts>:

void UartPuts(char str[]) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i]!='\0'; i++)
 8000810:	2300      	movs	r3, #0
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	e009      	b.n	800082a <UartPuts+0x22>
		UartPutch((uint8_t)str[i]);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ffda 	bl	80007d8 <UartPutch>
	for(int i=0; str[i]!='\0'; i++)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1ef      	bne.n	8000816 <UartPuts+0xe>
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000840:	480d      	ldr	r0, [pc, #52]	@ (8000878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000842:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000844:	f7ff ff30 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800086e:	f000 f837 	bl	80008e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff fd25 	bl	80002c0 <main>

08000876 <LoopForever>:

LoopForever:
  b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   r0, =_estack
 8000878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000884:	08001260 	.word	0x08001260
  ldr r2, =_sbss
 8000888:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800088c:	200001bc 	.word	0x200001bc

08000890 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC_IRQHandler>
	...

08000894 <siprintf>:
 8000894:	b40e      	push	{r1, r2, r3}
 8000896:	b500      	push	{lr}
 8000898:	b09c      	sub	sp, #112	@ 0x70
 800089a:	ab1d      	add	r3, sp, #116	@ 0x74
 800089c:	9002      	str	r0, [sp, #8]
 800089e:	9006      	str	r0, [sp, #24]
 80008a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80008a4:	4809      	ldr	r0, [pc, #36]	@ (80008cc <siprintf+0x38>)
 80008a6:	9107      	str	r1, [sp, #28]
 80008a8:	9104      	str	r1, [sp, #16]
 80008aa:	4909      	ldr	r1, [pc, #36]	@ (80008d0 <siprintf+0x3c>)
 80008ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80008b0:	9105      	str	r1, [sp, #20]
 80008b2:	6800      	ldr	r0, [r0, #0]
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	a902      	add	r1, sp, #8
 80008b8:	f000 f98c 	bl	8000bd4 <_svfiprintf_r>
 80008bc:	9b02      	ldr	r3, [sp, #8]
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	b01c      	add	sp, #112	@ 0x70
 80008c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80008c8:	b003      	add	sp, #12
 80008ca:	4770      	bx	lr
 80008cc:	20000004 	.word	0x20000004
 80008d0:	ffff0208 	.word	0xffff0208

080008d4 <__errno>:
 80008d4:	4b01      	ldr	r3, [pc, #4]	@ (80008dc <__errno+0x8>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000004 	.word	0x20000004

080008e0 <__libc_init_array>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	4d0d      	ldr	r5, [pc, #52]	@ (8000918 <__libc_init_array+0x38>)
 80008e4:	4c0d      	ldr	r4, [pc, #52]	@ (800091c <__libc_init_array+0x3c>)
 80008e6:	1b64      	subs	r4, r4, r5
 80008e8:	10a4      	asrs	r4, r4, #2
 80008ea:	2600      	movs	r6, #0
 80008ec:	42a6      	cmp	r6, r4
 80008ee:	d109      	bne.n	8000904 <__libc_init_array+0x24>
 80008f0:	4d0b      	ldr	r5, [pc, #44]	@ (8000920 <__libc_init_array+0x40>)
 80008f2:	4c0c      	ldr	r4, [pc, #48]	@ (8000924 <__libc_init_array+0x44>)
 80008f4:	f000 fc66 	bl	80011c4 <_init>
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	10a4      	asrs	r4, r4, #2
 80008fc:	2600      	movs	r6, #0
 80008fe:	42a6      	cmp	r6, r4
 8000900:	d105      	bne.n	800090e <__libc_init_array+0x2e>
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f855 3b04 	ldr.w	r3, [r5], #4
 8000908:	4798      	blx	r3
 800090a:	3601      	adds	r6, #1
 800090c:	e7ee      	b.n	80008ec <__libc_init_array+0xc>
 800090e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000912:	4798      	blx	r3
 8000914:	3601      	adds	r6, #1
 8000916:	e7f2      	b.n	80008fe <__libc_init_array+0x1e>
 8000918:	08001258 	.word	0x08001258
 800091c:	08001258 	.word	0x08001258
 8000920:	08001258 	.word	0x08001258
 8000924:	0800125c 	.word	0x0800125c

08000928 <__retarget_lock_acquire_recursive>:
 8000928:	4770      	bx	lr

0800092a <__retarget_lock_release_recursive>:
 800092a:	4770      	bx	lr

0800092c <_free_r>:
 800092c:	b538      	push	{r3, r4, r5, lr}
 800092e:	4605      	mov	r5, r0
 8000930:	2900      	cmp	r1, #0
 8000932:	d041      	beq.n	80009b8 <_free_r+0x8c>
 8000934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000938:	1f0c      	subs	r4, r1, #4
 800093a:	2b00      	cmp	r3, #0
 800093c:	bfb8      	it	lt
 800093e:	18e4      	addlt	r4, r4, r3
 8000940:	f000 f8e0 	bl	8000b04 <__malloc_lock>
 8000944:	4a1d      	ldr	r2, [pc, #116]	@ (80009bc <_free_r+0x90>)
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	b933      	cbnz	r3, 8000958 <_free_r+0x2c>
 800094a:	6063      	str	r3, [r4, #4]
 800094c:	6014      	str	r4, [r2, #0]
 800094e:	4628      	mov	r0, r5
 8000950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000954:	f000 b8dc 	b.w	8000b10 <__malloc_unlock>
 8000958:	42a3      	cmp	r3, r4
 800095a:	d908      	bls.n	800096e <_free_r+0x42>
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	1821      	adds	r1, r4, r0
 8000960:	428b      	cmp	r3, r1
 8000962:	bf01      	itttt	eq
 8000964:	6819      	ldreq	r1, [r3, #0]
 8000966:	685b      	ldreq	r3, [r3, #4]
 8000968:	1809      	addeq	r1, r1, r0
 800096a:	6021      	streq	r1, [r4, #0]
 800096c:	e7ed      	b.n	800094a <_free_r+0x1e>
 800096e:	461a      	mov	r2, r3
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	b10b      	cbz	r3, 8000978 <_free_r+0x4c>
 8000974:	42a3      	cmp	r3, r4
 8000976:	d9fa      	bls.n	800096e <_free_r+0x42>
 8000978:	6811      	ldr	r1, [r2, #0]
 800097a:	1850      	adds	r0, r2, r1
 800097c:	42a0      	cmp	r0, r4
 800097e:	d10b      	bne.n	8000998 <_free_r+0x6c>
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	4401      	add	r1, r0
 8000984:	1850      	adds	r0, r2, r1
 8000986:	4283      	cmp	r3, r0
 8000988:	6011      	str	r1, [r2, #0]
 800098a:	d1e0      	bne.n	800094e <_free_r+0x22>
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	6053      	str	r3, [r2, #4]
 8000992:	4408      	add	r0, r1
 8000994:	6010      	str	r0, [r2, #0]
 8000996:	e7da      	b.n	800094e <_free_r+0x22>
 8000998:	d902      	bls.n	80009a0 <_free_r+0x74>
 800099a:	230c      	movs	r3, #12
 800099c:	602b      	str	r3, [r5, #0]
 800099e:	e7d6      	b.n	800094e <_free_r+0x22>
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	1821      	adds	r1, r4, r0
 80009a4:	428b      	cmp	r3, r1
 80009a6:	bf04      	itt	eq
 80009a8:	6819      	ldreq	r1, [r3, #0]
 80009aa:	685b      	ldreq	r3, [r3, #4]
 80009ac:	6063      	str	r3, [r4, #4]
 80009ae:	bf04      	itt	eq
 80009b0:	1809      	addeq	r1, r1, r0
 80009b2:	6021      	streq	r1, [r4, #0]
 80009b4:	6054      	str	r4, [r2, #4]
 80009b6:	e7ca      	b.n	800094e <_free_r+0x22>
 80009b8:	bd38      	pop	{r3, r4, r5, pc}
 80009ba:	bf00      	nop
 80009bc:	200001b8 	.word	0x200001b8

080009c0 <sbrk_aligned>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	4e0f      	ldr	r6, [pc, #60]	@ (8000a00 <sbrk_aligned+0x40>)
 80009c4:	460c      	mov	r4, r1
 80009c6:	6831      	ldr	r1, [r6, #0]
 80009c8:	4605      	mov	r5, r0
 80009ca:	b911      	cbnz	r1, 80009d2 <sbrk_aligned+0x12>
 80009cc:	f000 fba6 	bl	800111c <_sbrk_r>
 80009d0:	6030      	str	r0, [r6, #0]
 80009d2:	4621      	mov	r1, r4
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 fba1 	bl	800111c <_sbrk_r>
 80009da:	1c43      	adds	r3, r0, #1
 80009dc:	d103      	bne.n	80009e6 <sbrk_aligned+0x26>
 80009de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80009e2:	4620      	mov	r0, r4
 80009e4:	bd70      	pop	{r4, r5, r6, pc}
 80009e6:	1cc4      	adds	r4, r0, #3
 80009e8:	f024 0403 	bic.w	r4, r4, #3
 80009ec:	42a0      	cmp	r0, r4
 80009ee:	d0f8      	beq.n	80009e2 <sbrk_aligned+0x22>
 80009f0:	1a21      	subs	r1, r4, r0
 80009f2:	4628      	mov	r0, r5
 80009f4:	f000 fb92 	bl	800111c <_sbrk_r>
 80009f8:	3001      	adds	r0, #1
 80009fa:	d1f2      	bne.n	80009e2 <sbrk_aligned+0x22>
 80009fc:	e7ef      	b.n	80009de <sbrk_aligned+0x1e>
 80009fe:	bf00      	nop
 8000a00:	200001b4 	.word	0x200001b4

08000a04 <_malloc_r>:
 8000a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a08:	1ccd      	adds	r5, r1, #3
 8000a0a:	f025 0503 	bic.w	r5, r5, #3
 8000a0e:	3508      	adds	r5, #8
 8000a10:	2d0c      	cmp	r5, #12
 8000a12:	bf38      	it	cc
 8000a14:	250c      	movcc	r5, #12
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	4606      	mov	r6, r0
 8000a1a:	db01      	blt.n	8000a20 <_malloc_r+0x1c>
 8000a1c:	42a9      	cmp	r1, r5
 8000a1e:	d904      	bls.n	8000a2a <_malloc_r+0x26>
 8000a20:	230c      	movs	r3, #12
 8000a22:	6033      	str	r3, [r6, #0]
 8000a24:	2000      	movs	r0, #0
 8000a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b00 <_malloc_r+0xfc>
 8000a2e:	f000 f869 	bl	8000b04 <__malloc_lock>
 8000a32:	f8d8 3000 	ldr.w	r3, [r8]
 8000a36:	461c      	mov	r4, r3
 8000a38:	bb44      	cbnz	r4, 8000a8c <_malloc_r+0x88>
 8000a3a:	4629      	mov	r1, r5
 8000a3c:	4630      	mov	r0, r6
 8000a3e:	f7ff ffbf 	bl	80009c0 <sbrk_aligned>
 8000a42:	1c43      	adds	r3, r0, #1
 8000a44:	4604      	mov	r4, r0
 8000a46:	d158      	bne.n	8000afa <_malloc_r+0xf6>
 8000a48:	f8d8 4000 	ldr.w	r4, [r8]
 8000a4c:	4627      	mov	r7, r4
 8000a4e:	2f00      	cmp	r7, #0
 8000a50:	d143      	bne.n	8000ada <_malloc_r+0xd6>
 8000a52:	2c00      	cmp	r4, #0
 8000a54:	d04b      	beq.n	8000aee <_malloc_r+0xea>
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	4639      	mov	r1, r7
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	eb04 0903 	add.w	r9, r4, r3
 8000a60:	f000 fb5c 	bl	800111c <_sbrk_r>
 8000a64:	4581      	cmp	r9, r0
 8000a66:	d142      	bne.n	8000aee <_malloc_r+0xea>
 8000a68:	6821      	ldr	r1, [r4, #0]
 8000a6a:	1a6d      	subs	r5, r5, r1
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	4630      	mov	r0, r6
 8000a70:	f7ff ffa6 	bl	80009c0 <sbrk_aligned>
 8000a74:	3001      	adds	r0, #1
 8000a76:	d03a      	beq.n	8000aee <_malloc_r+0xea>
 8000a78:	6823      	ldr	r3, [r4, #0]
 8000a7a:	442b      	add	r3, r5
 8000a7c:	6023      	str	r3, [r4, #0]
 8000a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	bb62      	cbnz	r2, 8000ae0 <_malloc_r+0xdc>
 8000a86:	f8c8 7000 	str.w	r7, [r8]
 8000a8a:	e00f      	b.n	8000aac <_malloc_r+0xa8>
 8000a8c:	6822      	ldr	r2, [r4, #0]
 8000a8e:	1b52      	subs	r2, r2, r5
 8000a90:	d420      	bmi.n	8000ad4 <_malloc_r+0xd0>
 8000a92:	2a0b      	cmp	r2, #11
 8000a94:	d917      	bls.n	8000ac6 <_malloc_r+0xc2>
 8000a96:	1961      	adds	r1, r4, r5
 8000a98:	42a3      	cmp	r3, r4
 8000a9a:	6025      	str	r5, [r4, #0]
 8000a9c:	bf18      	it	ne
 8000a9e:	6059      	strne	r1, [r3, #4]
 8000aa0:	6863      	ldr	r3, [r4, #4]
 8000aa2:	bf08      	it	eq
 8000aa4:	f8c8 1000 	streq.w	r1, [r8]
 8000aa8:	5162      	str	r2, [r4, r5]
 8000aaa:	604b      	str	r3, [r1, #4]
 8000aac:	4630      	mov	r0, r6
 8000aae:	f000 f82f 	bl	8000b10 <__malloc_unlock>
 8000ab2:	f104 000b 	add.w	r0, r4, #11
 8000ab6:	1d23      	adds	r3, r4, #4
 8000ab8:	f020 0007 	bic.w	r0, r0, #7
 8000abc:	1ac2      	subs	r2, r0, r3
 8000abe:	bf1c      	itt	ne
 8000ac0:	1a1b      	subne	r3, r3, r0
 8000ac2:	50a3      	strne	r3, [r4, r2]
 8000ac4:	e7af      	b.n	8000a26 <_malloc_r+0x22>
 8000ac6:	6862      	ldr	r2, [r4, #4]
 8000ac8:	42a3      	cmp	r3, r4
 8000aca:	bf0c      	ite	eq
 8000acc:	f8c8 2000 	streq.w	r2, [r8]
 8000ad0:	605a      	strne	r2, [r3, #4]
 8000ad2:	e7eb      	b.n	8000aac <_malloc_r+0xa8>
 8000ad4:	4623      	mov	r3, r4
 8000ad6:	6864      	ldr	r4, [r4, #4]
 8000ad8:	e7ae      	b.n	8000a38 <_malloc_r+0x34>
 8000ada:	463c      	mov	r4, r7
 8000adc:	687f      	ldr	r7, [r7, #4]
 8000ade:	e7b6      	b.n	8000a4e <_malloc_r+0x4a>
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	42a3      	cmp	r3, r4
 8000ae6:	d1fb      	bne.n	8000ae0 <_malloc_r+0xdc>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	6053      	str	r3, [r2, #4]
 8000aec:	e7de      	b.n	8000aac <_malloc_r+0xa8>
 8000aee:	230c      	movs	r3, #12
 8000af0:	6033      	str	r3, [r6, #0]
 8000af2:	4630      	mov	r0, r6
 8000af4:	f000 f80c 	bl	8000b10 <__malloc_unlock>
 8000af8:	e794      	b.n	8000a24 <_malloc_r+0x20>
 8000afa:	6005      	str	r5, [r0, #0]
 8000afc:	e7d6      	b.n	8000aac <_malloc_r+0xa8>
 8000afe:	bf00      	nop
 8000b00:	200001b8 	.word	0x200001b8

08000b04 <__malloc_lock>:
 8000b04:	4801      	ldr	r0, [pc, #4]	@ (8000b0c <__malloc_lock+0x8>)
 8000b06:	f7ff bf0f 	b.w	8000928 <__retarget_lock_acquire_recursive>
 8000b0a:	bf00      	nop
 8000b0c:	200001b0 	.word	0x200001b0

08000b10 <__malloc_unlock>:
 8000b10:	4801      	ldr	r0, [pc, #4]	@ (8000b18 <__malloc_unlock+0x8>)
 8000b12:	f7ff bf0a 	b.w	800092a <__retarget_lock_release_recursive>
 8000b16:	bf00      	nop
 8000b18:	200001b0 	.word	0x200001b0

08000b1c <__ssputs_r>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	688e      	ldr	r6, [r1, #8]
 8000b22:	461f      	mov	r7, r3
 8000b24:	42be      	cmp	r6, r7
 8000b26:	680b      	ldr	r3, [r1, #0]
 8000b28:	4682      	mov	sl, r0
 8000b2a:	460c      	mov	r4, r1
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	d82d      	bhi.n	8000b8c <__ssputs_r+0x70>
 8000b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000b38:	d026      	beq.n	8000b88 <__ssputs_r+0x6c>
 8000b3a:	6965      	ldr	r5, [r4, #20]
 8000b3c:	6909      	ldr	r1, [r1, #16]
 8000b3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b42:	eba3 0901 	sub.w	r9, r3, r1
 8000b46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b4a:	1c7b      	adds	r3, r7, #1
 8000b4c:	444b      	add	r3, r9
 8000b4e:	106d      	asrs	r5, r5, #1
 8000b50:	429d      	cmp	r5, r3
 8000b52:	bf38      	it	cc
 8000b54:	461d      	movcc	r5, r3
 8000b56:	0553      	lsls	r3, r2, #21
 8000b58:	d527      	bpl.n	8000baa <__ssputs_r+0x8e>
 8000b5a:	4629      	mov	r1, r5
 8000b5c:	f7ff ff52 	bl	8000a04 <_malloc_r>
 8000b60:	4606      	mov	r6, r0
 8000b62:	b360      	cbz	r0, 8000bbe <__ssputs_r+0xa2>
 8000b64:	6921      	ldr	r1, [r4, #16]
 8000b66:	464a      	mov	r2, r9
 8000b68:	f000 fae8 	bl	800113c <memcpy>
 8000b6c:	89a3      	ldrh	r3, [r4, #12]
 8000b6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000b72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b76:	81a3      	strh	r3, [r4, #12]
 8000b78:	6126      	str	r6, [r4, #16]
 8000b7a:	6165      	str	r5, [r4, #20]
 8000b7c:	444e      	add	r6, r9
 8000b7e:	eba5 0509 	sub.w	r5, r5, r9
 8000b82:	6026      	str	r6, [r4, #0]
 8000b84:	60a5      	str	r5, [r4, #8]
 8000b86:	463e      	mov	r6, r7
 8000b88:	42be      	cmp	r6, r7
 8000b8a:	d900      	bls.n	8000b8e <__ssputs_r+0x72>
 8000b8c:	463e      	mov	r6, r7
 8000b8e:	6820      	ldr	r0, [r4, #0]
 8000b90:	4632      	mov	r2, r6
 8000b92:	4641      	mov	r1, r8
 8000b94:	f000 faa8 	bl	80010e8 <memmove>
 8000b98:	68a3      	ldr	r3, [r4, #8]
 8000b9a:	1b9b      	subs	r3, r3, r6
 8000b9c:	60a3      	str	r3, [r4, #8]
 8000b9e:	6823      	ldr	r3, [r4, #0]
 8000ba0:	4433      	add	r3, r6
 8000ba2:	6023      	str	r3, [r4, #0]
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000baa:	462a      	mov	r2, r5
 8000bac:	f000 fad4 	bl	8001158 <_realloc_r>
 8000bb0:	4606      	mov	r6, r0
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	d1e0      	bne.n	8000b78 <__ssputs_r+0x5c>
 8000bb6:	6921      	ldr	r1, [r4, #16]
 8000bb8:	4650      	mov	r0, sl
 8000bba:	f7ff feb7 	bl	800092c <_free_r>
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	f8ca 3000 	str.w	r3, [sl]
 8000bc4:	89a3      	ldrh	r3, [r4, #12]
 8000bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bca:	81a3      	strh	r3, [r4, #12]
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bd0:	e7e9      	b.n	8000ba6 <__ssputs_r+0x8a>
	...

08000bd4 <_svfiprintf_r>:
 8000bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd8:	4698      	mov	r8, r3
 8000bda:	898b      	ldrh	r3, [r1, #12]
 8000bdc:	061b      	lsls	r3, r3, #24
 8000bde:	b09d      	sub	sp, #116	@ 0x74
 8000be0:	4607      	mov	r7, r0
 8000be2:	460d      	mov	r5, r1
 8000be4:	4614      	mov	r4, r2
 8000be6:	d510      	bpl.n	8000c0a <_svfiprintf_r+0x36>
 8000be8:	690b      	ldr	r3, [r1, #16]
 8000bea:	b973      	cbnz	r3, 8000c0a <_svfiprintf_r+0x36>
 8000bec:	2140      	movs	r1, #64	@ 0x40
 8000bee:	f7ff ff09 	bl	8000a04 <_malloc_r>
 8000bf2:	6028      	str	r0, [r5, #0]
 8000bf4:	6128      	str	r0, [r5, #16]
 8000bf6:	b930      	cbnz	r0, 8000c06 <_svfiprintf_r+0x32>
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	603b      	str	r3, [r7, #0]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	b01d      	add	sp, #116	@ 0x74
 8000c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c06:	2340      	movs	r3, #64	@ 0x40
 8000c08:	616b      	str	r3, [r5, #20]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c0e:	2320      	movs	r3, #32
 8000c10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c14:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c18:	2330      	movs	r3, #48	@ 0x30
 8000c1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000db8 <_svfiprintf_r+0x1e4>
 8000c1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c22:	f04f 0901 	mov.w	r9, #1
 8000c26:	4623      	mov	r3, r4
 8000c28:	469a      	mov	sl, r3
 8000c2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c2e:	b10a      	cbz	r2, 8000c34 <_svfiprintf_r+0x60>
 8000c30:	2a25      	cmp	r2, #37	@ 0x25
 8000c32:	d1f9      	bne.n	8000c28 <_svfiprintf_r+0x54>
 8000c34:	ebba 0b04 	subs.w	fp, sl, r4
 8000c38:	d00b      	beq.n	8000c52 <_svfiprintf_r+0x7e>
 8000c3a:	465b      	mov	r3, fp
 8000c3c:	4622      	mov	r2, r4
 8000c3e:	4629      	mov	r1, r5
 8000c40:	4638      	mov	r0, r7
 8000c42:	f7ff ff6b 	bl	8000b1c <__ssputs_r>
 8000c46:	3001      	adds	r0, #1
 8000c48:	f000 80a7 	beq.w	8000d9a <_svfiprintf_r+0x1c6>
 8000c4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c4e:	445a      	add	r2, fp
 8000c50:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c52:	f89a 3000 	ldrb.w	r3, [sl]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f000 809f 	beq.w	8000d9a <_svfiprintf_r+0x1c6>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c66:	f10a 0a01 	add.w	sl, sl, #1
 8000c6a:	9304      	str	r3, [sp, #16]
 8000c6c:	9307      	str	r3, [sp, #28]
 8000c6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c72:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c74:	4654      	mov	r4, sl
 8000c76:	2205      	movs	r2, #5
 8000c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c7c:	484e      	ldr	r0, [pc, #312]	@ (8000db8 <_svfiprintf_r+0x1e4>)
 8000c7e:	f7ff faa7 	bl	80001d0 <memchr>
 8000c82:	9a04      	ldr	r2, [sp, #16]
 8000c84:	b9d8      	cbnz	r0, 8000cbe <_svfiprintf_r+0xea>
 8000c86:	06d0      	lsls	r0, r2, #27
 8000c88:	bf44      	itt	mi
 8000c8a:	2320      	movmi	r3, #32
 8000c8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c90:	0711      	lsls	r1, r2, #28
 8000c92:	bf44      	itt	mi
 8000c94:	232b      	movmi	r3, #43	@ 0x2b
 8000c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8000c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ca0:	d015      	beq.n	8000cce <_svfiprintf_r+0xfa>
 8000ca2:	9a07      	ldr	r2, [sp, #28]
 8000ca4:	4654      	mov	r4, sl
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f04f 0c0a 	mov.w	ip, #10
 8000cac:	4621      	mov	r1, r4
 8000cae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cb2:	3b30      	subs	r3, #48	@ 0x30
 8000cb4:	2b09      	cmp	r3, #9
 8000cb6:	d94b      	bls.n	8000d50 <_svfiprintf_r+0x17c>
 8000cb8:	b1b0      	cbz	r0, 8000ce8 <_svfiprintf_r+0x114>
 8000cba:	9207      	str	r2, [sp, #28]
 8000cbc:	e014      	b.n	8000ce8 <_svfiprintf_r+0x114>
 8000cbe:	eba0 0308 	sub.w	r3, r0, r8
 8000cc2:	fa09 f303 	lsl.w	r3, r9, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	9304      	str	r3, [sp, #16]
 8000cca:	46a2      	mov	sl, r4
 8000ccc:	e7d2      	b.n	8000c74 <_svfiprintf_r+0xa0>
 8000cce:	9b03      	ldr	r3, [sp, #12]
 8000cd0:	1d19      	adds	r1, r3, #4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	9103      	str	r1, [sp, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bfbb      	ittet	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	f042 0202 	orrlt.w	r2, r2, #2
 8000ce0:	9307      	strge	r3, [sp, #28]
 8000ce2:	9307      	strlt	r3, [sp, #28]
 8000ce4:	bfb8      	it	lt
 8000ce6:	9204      	strlt	r2, [sp, #16]
 8000ce8:	7823      	ldrb	r3, [r4, #0]
 8000cea:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cec:	d10a      	bne.n	8000d04 <_svfiprintf_r+0x130>
 8000cee:	7863      	ldrb	r3, [r4, #1]
 8000cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cf2:	d132      	bne.n	8000d5a <_svfiprintf_r+0x186>
 8000cf4:	9b03      	ldr	r3, [sp, #12]
 8000cf6:	1d1a      	adds	r2, r3, #4
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	9203      	str	r2, [sp, #12]
 8000cfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d00:	3402      	adds	r4, #2
 8000d02:	9305      	str	r3, [sp, #20]
 8000d04:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000dbc <_svfiprintf_r+0x1e8>
 8000d08:	7821      	ldrb	r1, [r4, #0]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	4650      	mov	r0, sl
 8000d0e:	f7ff fa5f 	bl	80001d0 <memchr>
 8000d12:	b138      	cbz	r0, 8000d24 <_svfiprintf_r+0x150>
 8000d14:	9b04      	ldr	r3, [sp, #16]
 8000d16:	eba0 000a 	sub.w	r0, r0, sl
 8000d1a:	2240      	movs	r2, #64	@ 0x40
 8000d1c:	4082      	lsls	r2, r0
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	3401      	adds	r4, #1
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d28:	4825      	ldr	r0, [pc, #148]	@ (8000dc0 <_svfiprintf_r+0x1ec>)
 8000d2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d2e:	2206      	movs	r2, #6
 8000d30:	f7ff fa4e 	bl	80001d0 <memchr>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d036      	beq.n	8000da6 <_svfiprintf_r+0x1d2>
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <_svfiprintf_r+0x1f0>)
 8000d3a:	bb1b      	cbnz	r3, 8000d84 <_svfiprintf_r+0x1b0>
 8000d3c:	9b03      	ldr	r3, [sp, #12]
 8000d3e:	3307      	adds	r3, #7
 8000d40:	f023 0307 	bic.w	r3, r3, #7
 8000d44:	3308      	adds	r3, #8
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d4a:	4433      	add	r3, r6
 8000d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d4e:	e76a      	b.n	8000c26 <_svfiprintf_r+0x52>
 8000d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d54:	460c      	mov	r4, r1
 8000d56:	2001      	movs	r0, #1
 8000d58:	e7a8      	b.n	8000cac <_svfiprintf_r+0xd8>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	3401      	adds	r4, #1
 8000d5e:	9305      	str	r3, [sp, #20]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 0c0a 	mov.w	ip, #10
 8000d66:	4620      	mov	r0, r4
 8000d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d6c:	3a30      	subs	r2, #48	@ 0x30
 8000d6e:	2a09      	cmp	r2, #9
 8000d70:	d903      	bls.n	8000d7a <_svfiprintf_r+0x1a6>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0c6      	beq.n	8000d04 <_svfiprintf_r+0x130>
 8000d76:	9105      	str	r1, [sp, #20]
 8000d78:	e7c4      	b.n	8000d04 <_svfiprintf_r+0x130>
 8000d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d7e:	4604      	mov	r4, r0
 8000d80:	2301      	movs	r3, #1
 8000d82:	e7f0      	b.n	8000d66 <_svfiprintf_r+0x192>
 8000d84:	ab03      	add	r3, sp, #12
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	462a      	mov	r2, r5
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <_svfiprintf_r+0x1f4>)
 8000d8c:	a904      	add	r1, sp, #16
 8000d8e:	4638      	mov	r0, r7
 8000d90:	f3af 8000 	nop.w
 8000d94:	1c42      	adds	r2, r0, #1
 8000d96:	4606      	mov	r6, r0
 8000d98:	d1d6      	bne.n	8000d48 <_svfiprintf_r+0x174>
 8000d9a:	89ab      	ldrh	r3, [r5, #12]
 8000d9c:	065b      	lsls	r3, r3, #25
 8000d9e:	f53f af2d 	bmi.w	8000bfc <_svfiprintf_r+0x28>
 8000da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000da4:	e72c      	b.n	8000c00 <_svfiprintf_r+0x2c>
 8000da6:	ab03      	add	r3, sp, #12
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	462a      	mov	r2, r5
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <_svfiprintf_r+0x1f4>)
 8000dae:	a904      	add	r1, sp, #16
 8000db0:	4638      	mov	r0, r7
 8000db2:	f000 f879 	bl	8000ea8 <_printf_i>
 8000db6:	e7ed      	b.n	8000d94 <_svfiprintf_r+0x1c0>
 8000db8:	0800121b 	.word	0x0800121b
 8000dbc:	08001221 	.word	0x08001221
 8000dc0:	08001225 	.word	0x08001225
 8000dc4:	00000000 	.word	0x00000000
 8000dc8:	08000b1d 	.word	0x08000b1d

08000dcc <_printf_common>:
 8000dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd0:	4616      	mov	r6, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	688a      	ldr	r2, [r1, #8]
 8000dd6:	690b      	ldr	r3, [r1, #16]
 8000dd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	bfb8      	it	lt
 8000de0:	4613      	movlt	r3, r2
 8000de2:	6033      	str	r3, [r6, #0]
 8000de4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000de8:	4607      	mov	r7, r0
 8000dea:	460c      	mov	r4, r1
 8000dec:	b10a      	cbz	r2, 8000df2 <_printf_common+0x26>
 8000dee:	3301      	adds	r3, #1
 8000df0:	6033      	str	r3, [r6, #0]
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	0699      	lsls	r1, r3, #26
 8000df6:	bf42      	ittt	mi
 8000df8:	6833      	ldrmi	r3, [r6, #0]
 8000dfa:	3302      	addmi	r3, #2
 8000dfc:	6033      	strmi	r3, [r6, #0]
 8000dfe:	6825      	ldr	r5, [r4, #0]
 8000e00:	f015 0506 	ands.w	r5, r5, #6
 8000e04:	d106      	bne.n	8000e14 <_printf_common+0x48>
 8000e06:	f104 0a19 	add.w	sl, r4, #25
 8000e0a:	68e3      	ldr	r3, [r4, #12]
 8000e0c:	6832      	ldr	r2, [r6, #0]
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	dc26      	bgt.n	8000e62 <_printf_common+0x96>
 8000e14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e18:	6822      	ldr	r2, [r4, #0]
 8000e1a:	3b00      	subs	r3, #0
 8000e1c:	bf18      	it	ne
 8000e1e:	2301      	movne	r3, #1
 8000e20:	0692      	lsls	r2, r2, #26
 8000e22:	d42b      	bmi.n	8000e7c <_printf_common+0xb0>
 8000e24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e28:	4641      	mov	r1, r8
 8000e2a:	4638      	mov	r0, r7
 8000e2c:	47c8      	blx	r9
 8000e2e:	3001      	adds	r0, #1
 8000e30:	d01e      	beq.n	8000e70 <_printf_common+0xa4>
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	6922      	ldr	r2, [r4, #16]
 8000e36:	f003 0306 	and.w	r3, r3, #6
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf02      	ittt	eq
 8000e3e:	68e5      	ldreq	r5, [r4, #12]
 8000e40:	6833      	ldreq	r3, [r6, #0]
 8000e42:	1aed      	subeq	r5, r5, r3
 8000e44:	68a3      	ldr	r3, [r4, #8]
 8000e46:	bf0c      	ite	eq
 8000e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e4c:	2500      	movne	r5, #0
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	bfc4      	itt	gt
 8000e52:	1a9b      	subgt	r3, r3, r2
 8000e54:	18ed      	addgt	r5, r5, r3
 8000e56:	2600      	movs	r6, #0
 8000e58:	341a      	adds	r4, #26
 8000e5a:	42b5      	cmp	r5, r6
 8000e5c:	d11a      	bne.n	8000e94 <_printf_common+0xc8>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	e008      	b.n	8000e74 <_printf_common+0xa8>
 8000e62:	2301      	movs	r3, #1
 8000e64:	4652      	mov	r2, sl
 8000e66:	4641      	mov	r1, r8
 8000e68:	4638      	mov	r0, r7
 8000e6a:	47c8      	blx	r9
 8000e6c:	3001      	adds	r0, #1
 8000e6e:	d103      	bne.n	8000e78 <_printf_common+0xac>
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	3501      	adds	r5, #1
 8000e7a:	e7c6      	b.n	8000e0a <_printf_common+0x3e>
 8000e7c:	18e1      	adds	r1, r4, r3
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	2030      	movs	r0, #48	@ 0x30
 8000e82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e86:	4422      	add	r2, r4
 8000e88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e90:	3302      	adds	r3, #2
 8000e92:	e7c7      	b.n	8000e24 <_printf_common+0x58>
 8000e94:	2301      	movs	r3, #1
 8000e96:	4622      	mov	r2, r4
 8000e98:	4641      	mov	r1, r8
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	47c8      	blx	r9
 8000e9e:	3001      	adds	r0, #1
 8000ea0:	d0e6      	beq.n	8000e70 <_printf_common+0xa4>
 8000ea2:	3601      	adds	r6, #1
 8000ea4:	e7d9      	b.n	8000e5a <_printf_common+0x8e>
	...

08000ea8 <_printf_i>:
 8000ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	7e0f      	ldrb	r7, [r1, #24]
 8000eae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000eb0:	2f78      	cmp	r7, #120	@ 0x78
 8000eb2:	4691      	mov	r9, r2
 8000eb4:	4680      	mov	r8, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	469a      	mov	sl, r3
 8000eba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000ebe:	d807      	bhi.n	8000ed0 <_printf_i+0x28>
 8000ec0:	2f62      	cmp	r7, #98	@ 0x62
 8000ec2:	d80a      	bhi.n	8000eda <_printf_i+0x32>
 8000ec4:	2f00      	cmp	r7, #0
 8000ec6:	f000 80d2 	beq.w	800106e <_printf_i+0x1c6>
 8000eca:	2f58      	cmp	r7, #88	@ 0x58
 8000ecc:	f000 80b9 	beq.w	8001042 <_printf_i+0x19a>
 8000ed0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ed4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ed8:	e03a      	b.n	8000f50 <_printf_i+0xa8>
 8000eda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ede:	2b15      	cmp	r3, #21
 8000ee0:	d8f6      	bhi.n	8000ed0 <_printf_i+0x28>
 8000ee2:	a101      	add	r1, pc, #4	@ (adr r1, 8000ee8 <_printf_i+0x40>)
 8000ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ee8:	08000f41 	.word	0x08000f41
 8000eec:	08000f55 	.word	0x08000f55
 8000ef0:	08000ed1 	.word	0x08000ed1
 8000ef4:	08000ed1 	.word	0x08000ed1
 8000ef8:	08000ed1 	.word	0x08000ed1
 8000efc:	08000ed1 	.word	0x08000ed1
 8000f00:	08000f55 	.word	0x08000f55
 8000f04:	08000ed1 	.word	0x08000ed1
 8000f08:	08000ed1 	.word	0x08000ed1
 8000f0c:	08000ed1 	.word	0x08000ed1
 8000f10:	08000ed1 	.word	0x08000ed1
 8000f14:	08001055 	.word	0x08001055
 8000f18:	08000f7f 	.word	0x08000f7f
 8000f1c:	0800100f 	.word	0x0800100f
 8000f20:	08000ed1 	.word	0x08000ed1
 8000f24:	08000ed1 	.word	0x08000ed1
 8000f28:	08001077 	.word	0x08001077
 8000f2c:	08000ed1 	.word	0x08000ed1
 8000f30:	08000f7f 	.word	0x08000f7f
 8000f34:	08000ed1 	.word	0x08000ed1
 8000f38:	08000ed1 	.word	0x08000ed1
 8000f3c:	08001017 	.word	0x08001017
 8000f40:	6833      	ldr	r3, [r6, #0]
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	6032      	str	r2, [r6, #0]
 8000f48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f50:	2301      	movs	r3, #1
 8000f52:	e09d      	b.n	8001090 <_printf_i+0x1e8>
 8000f54:	6833      	ldr	r3, [r6, #0]
 8000f56:	6820      	ldr	r0, [r4, #0]
 8000f58:	1d19      	adds	r1, r3, #4
 8000f5a:	6031      	str	r1, [r6, #0]
 8000f5c:	0606      	lsls	r6, r0, #24
 8000f5e:	d501      	bpl.n	8000f64 <_printf_i+0xbc>
 8000f60:	681d      	ldr	r5, [r3, #0]
 8000f62:	e003      	b.n	8000f6c <_printf_i+0xc4>
 8000f64:	0645      	lsls	r5, r0, #25
 8000f66:	d5fb      	bpl.n	8000f60 <_printf_i+0xb8>
 8000f68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f6c:	2d00      	cmp	r5, #0
 8000f6e:	da03      	bge.n	8000f78 <_printf_i+0xd0>
 8000f70:	232d      	movs	r3, #45	@ 0x2d
 8000f72:	426d      	negs	r5, r5
 8000f74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f78:	4859      	ldr	r0, [pc, #356]	@ (80010e0 <_printf_i+0x238>)
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	e011      	b.n	8000fa2 <_printf_i+0xfa>
 8000f7e:	6821      	ldr	r1, [r4, #0]
 8000f80:	6833      	ldr	r3, [r6, #0]
 8000f82:	0608      	lsls	r0, r1, #24
 8000f84:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f88:	d402      	bmi.n	8000f90 <_printf_i+0xe8>
 8000f8a:	0649      	lsls	r1, r1, #25
 8000f8c:	bf48      	it	mi
 8000f8e:	b2ad      	uxthmi	r5, r5
 8000f90:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f92:	4853      	ldr	r0, [pc, #332]	@ (80010e0 <_printf_i+0x238>)
 8000f94:	6033      	str	r3, [r6, #0]
 8000f96:	bf14      	ite	ne
 8000f98:	230a      	movne	r3, #10
 8000f9a:	2308      	moveq	r3, #8
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000fa2:	6866      	ldr	r6, [r4, #4]
 8000fa4:	60a6      	str	r6, [r4, #8]
 8000fa6:	2e00      	cmp	r6, #0
 8000fa8:	bfa2      	ittt	ge
 8000faa:	6821      	ldrge	r1, [r4, #0]
 8000fac:	f021 0104 	bicge.w	r1, r1, #4
 8000fb0:	6021      	strge	r1, [r4, #0]
 8000fb2:	b90d      	cbnz	r5, 8000fb8 <_printf_i+0x110>
 8000fb4:	2e00      	cmp	r6, #0
 8000fb6:	d04b      	beq.n	8001050 <_printf_i+0x1a8>
 8000fb8:	4616      	mov	r6, r2
 8000fba:	fbb5 f1f3 	udiv	r1, r5, r3
 8000fbe:	fb03 5711 	mls	r7, r3, r1, r5
 8000fc2:	5dc7      	ldrb	r7, [r0, r7]
 8000fc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fc8:	462f      	mov	r7, r5
 8000fca:	42bb      	cmp	r3, r7
 8000fcc:	460d      	mov	r5, r1
 8000fce:	d9f4      	bls.n	8000fba <_printf_i+0x112>
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d10b      	bne.n	8000fec <_printf_i+0x144>
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	07df      	lsls	r7, r3, #31
 8000fd8:	d508      	bpl.n	8000fec <_printf_i+0x144>
 8000fda:	6923      	ldr	r3, [r4, #16]
 8000fdc:	6861      	ldr	r1, [r4, #4]
 8000fde:	4299      	cmp	r1, r3
 8000fe0:	bfde      	ittt	le
 8000fe2:	2330      	movle	r3, #48	@ 0x30
 8000fe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fe8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000fec:	1b92      	subs	r2, r2, r6
 8000fee:	6122      	str	r2, [r4, #16]
 8000ff0:	f8cd a000 	str.w	sl, [sp]
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	aa03      	add	r2, sp, #12
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	f7ff fee6 	bl	8000dcc <_printf_common>
 8001000:	3001      	adds	r0, #1
 8001002:	d14a      	bne.n	800109a <_printf_i+0x1f2>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001008:	b004      	add	sp, #16
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	4833      	ldr	r0, [pc, #204]	@ (80010e4 <_printf_i+0x23c>)
 8001018:	2778      	movs	r7, #120	@ 0x78
 800101a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	6831      	ldr	r1, [r6, #0]
 8001022:	061f      	lsls	r7, r3, #24
 8001024:	f851 5b04 	ldr.w	r5, [r1], #4
 8001028:	d402      	bmi.n	8001030 <_printf_i+0x188>
 800102a:	065f      	lsls	r7, r3, #25
 800102c:	bf48      	it	mi
 800102e:	b2ad      	uxthmi	r5, r5
 8001030:	6031      	str	r1, [r6, #0]
 8001032:	07d9      	lsls	r1, r3, #31
 8001034:	bf44      	itt	mi
 8001036:	f043 0320 	orrmi.w	r3, r3, #32
 800103a:	6023      	strmi	r3, [r4, #0]
 800103c:	b11d      	cbz	r5, 8001046 <_printf_i+0x19e>
 800103e:	2310      	movs	r3, #16
 8001040:	e7ac      	b.n	8000f9c <_printf_i+0xf4>
 8001042:	4827      	ldr	r0, [pc, #156]	@ (80010e0 <_printf_i+0x238>)
 8001044:	e7e9      	b.n	800101a <_printf_i+0x172>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	f023 0320 	bic.w	r3, r3, #32
 800104c:	6023      	str	r3, [r4, #0]
 800104e:	e7f6      	b.n	800103e <_printf_i+0x196>
 8001050:	4616      	mov	r6, r2
 8001052:	e7bd      	b.n	8000fd0 <_printf_i+0x128>
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	6825      	ldr	r5, [r4, #0]
 8001058:	6961      	ldr	r1, [r4, #20]
 800105a:	1d18      	adds	r0, r3, #4
 800105c:	6030      	str	r0, [r6, #0]
 800105e:	062e      	lsls	r6, r5, #24
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	d501      	bpl.n	8001068 <_printf_i+0x1c0>
 8001064:	6019      	str	r1, [r3, #0]
 8001066:	e002      	b.n	800106e <_printf_i+0x1c6>
 8001068:	0668      	lsls	r0, r5, #25
 800106a:	d5fb      	bpl.n	8001064 <_printf_i+0x1bc>
 800106c:	8019      	strh	r1, [r3, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	6123      	str	r3, [r4, #16]
 8001072:	4616      	mov	r6, r2
 8001074:	e7bc      	b.n	8000ff0 <_printf_i+0x148>
 8001076:	6833      	ldr	r3, [r6, #0]
 8001078:	1d1a      	adds	r2, r3, #4
 800107a:	6032      	str	r2, [r6, #0]
 800107c:	681e      	ldr	r6, [r3, #0]
 800107e:	6862      	ldr	r2, [r4, #4]
 8001080:	2100      	movs	r1, #0
 8001082:	4630      	mov	r0, r6
 8001084:	f7ff f8a4 	bl	80001d0 <memchr>
 8001088:	b108      	cbz	r0, 800108e <_printf_i+0x1e6>
 800108a:	1b80      	subs	r0, r0, r6
 800108c:	6060      	str	r0, [r4, #4]
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	6123      	str	r3, [r4, #16]
 8001092:	2300      	movs	r3, #0
 8001094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001098:	e7aa      	b.n	8000ff0 <_printf_i+0x148>
 800109a:	6923      	ldr	r3, [r4, #16]
 800109c:	4632      	mov	r2, r6
 800109e:	4649      	mov	r1, r9
 80010a0:	4640      	mov	r0, r8
 80010a2:	47d0      	blx	sl
 80010a4:	3001      	adds	r0, #1
 80010a6:	d0ad      	beq.n	8001004 <_printf_i+0x15c>
 80010a8:	6823      	ldr	r3, [r4, #0]
 80010aa:	079b      	lsls	r3, r3, #30
 80010ac:	d413      	bmi.n	80010d6 <_printf_i+0x22e>
 80010ae:	68e0      	ldr	r0, [r4, #12]
 80010b0:	9b03      	ldr	r3, [sp, #12]
 80010b2:	4298      	cmp	r0, r3
 80010b4:	bfb8      	it	lt
 80010b6:	4618      	movlt	r0, r3
 80010b8:	e7a6      	b.n	8001008 <_printf_i+0x160>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4632      	mov	r2, r6
 80010be:	4649      	mov	r1, r9
 80010c0:	4640      	mov	r0, r8
 80010c2:	47d0      	blx	sl
 80010c4:	3001      	adds	r0, #1
 80010c6:	d09d      	beq.n	8001004 <_printf_i+0x15c>
 80010c8:	3501      	adds	r5, #1
 80010ca:	68e3      	ldr	r3, [r4, #12]
 80010cc:	9903      	ldr	r1, [sp, #12]
 80010ce:	1a5b      	subs	r3, r3, r1
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	dcf2      	bgt.n	80010ba <_printf_i+0x212>
 80010d4:	e7eb      	b.n	80010ae <_printf_i+0x206>
 80010d6:	2500      	movs	r5, #0
 80010d8:	f104 0619 	add.w	r6, r4, #25
 80010dc:	e7f5      	b.n	80010ca <_printf_i+0x222>
 80010de:	bf00      	nop
 80010e0:	0800122c 	.word	0x0800122c
 80010e4:	0800123d 	.word	0x0800123d

080010e8 <memmove>:
 80010e8:	4288      	cmp	r0, r1
 80010ea:	b510      	push	{r4, lr}
 80010ec:	eb01 0402 	add.w	r4, r1, r2
 80010f0:	d902      	bls.n	80010f8 <memmove+0x10>
 80010f2:	4284      	cmp	r4, r0
 80010f4:	4623      	mov	r3, r4
 80010f6:	d807      	bhi.n	8001108 <memmove+0x20>
 80010f8:	1e43      	subs	r3, r0, #1
 80010fa:	42a1      	cmp	r1, r4
 80010fc:	d008      	beq.n	8001110 <memmove+0x28>
 80010fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001106:	e7f8      	b.n	80010fa <memmove+0x12>
 8001108:	4402      	add	r2, r0
 800110a:	4601      	mov	r1, r0
 800110c:	428a      	cmp	r2, r1
 800110e:	d100      	bne.n	8001112 <memmove+0x2a>
 8001110:	bd10      	pop	{r4, pc}
 8001112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800111a:	e7f7      	b.n	800110c <memmove+0x24>

0800111c <_sbrk_r>:
 800111c:	b538      	push	{r3, r4, r5, lr}
 800111e:	4d06      	ldr	r5, [pc, #24]	@ (8001138 <_sbrk_r+0x1c>)
 8001120:	2300      	movs	r3, #0
 8001122:	4604      	mov	r4, r0
 8001124:	4608      	mov	r0, r1
 8001126:	602b      	str	r3, [r5, #0]
 8001128:	f7ff fa88 	bl	800063c <_sbrk>
 800112c:	1c43      	adds	r3, r0, #1
 800112e:	d102      	bne.n	8001136 <_sbrk_r+0x1a>
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	b103      	cbz	r3, 8001136 <_sbrk_r+0x1a>
 8001134:	6023      	str	r3, [r4, #0]
 8001136:	bd38      	pop	{r3, r4, r5, pc}
 8001138:	200001ac 	.word	0x200001ac

0800113c <memcpy>:
 800113c:	440a      	add	r2, r1
 800113e:	4291      	cmp	r1, r2
 8001140:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001144:	d100      	bne.n	8001148 <memcpy+0xc>
 8001146:	4770      	bx	lr
 8001148:	b510      	push	{r4, lr}
 800114a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800114e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001152:	4291      	cmp	r1, r2
 8001154:	d1f9      	bne.n	800114a <memcpy+0xe>
 8001156:	bd10      	pop	{r4, pc}

08001158 <_realloc_r>:
 8001158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800115c:	4680      	mov	r8, r0
 800115e:	4615      	mov	r5, r2
 8001160:	460c      	mov	r4, r1
 8001162:	b921      	cbnz	r1, 800116e <_realloc_r+0x16>
 8001164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001168:	4611      	mov	r1, r2
 800116a:	f7ff bc4b 	b.w	8000a04 <_malloc_r>
 800116e:	b92a      	cbnz	r2, 800117c <_realloc_r+0x24>
 8001170:	f7ff fbdc 	bl	800092c <_free_r>
 8001174:	2400      	movs	r4, #0
 8001176:	4620      	mov	r0, r4
 8001178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800117c:	f000 f81a 	bl	80011b4 <_malloc_usable_size_r>
 8001180:	4285      	cmp	r5, r0
 8001182:	4606      	mov	r6, r0
 8001184:	d802      	bhi.n	800118c <_realloc_r+0x34>
 8001186:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800118a:	d8f4      	bhi.n	8001176 <_realloc_r+0x1e>
 800118c:	4629      	mov	r1, r5
 800118e:	4640      	mov	r0, r8
 8001190:	f7ff fc38 	bl	8000a04 <_malloc_r>
 8001194:	4607      	mov	r7, r0
 8001196:	2800      	cmp	r0, #0
 8001198:	d0ec      	beq.n	8001174 <_realloc_r+0x1c>
 800119a:	42b5      	cmp	r5, r6
 800119c:	462a      	mov	r2, r5
 800119e:	4621      	mov	r1, r4
 80011a0:	bf28      	it	cs
 80011a2:	4632      	movcs	r2, r6
 80011a4:	f7ff ffca 	bl	800113c <memcpy>
 80011a8:	4621      	mov	r1, r4
 80011aa:	4640      	mov	r0, r8
 80011ac:	f7ff fbbe 	bl	800092c <_free_r>
 80011b0:	463c      	mov	r4, r7
 80011b2:	e7e0      	b.n	8001176 <_realloc_r+0x1e>

080011b4 <_malloc_usable_size_r>:
 80011b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011b8:	1f18      	subs	r0, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	bfbc      	itt	lt
 80011be:	580b      	ldrlt	r3, [r1, r0]
 80011c0:	18c0      	addlt	r0, r0, r3
 80011c2:	4770      	bx	lr

080011c4 <_init>:
 80011c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c6:	bf00      	nop
 80011c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ca:	bc08      	pop	{r3}
 80011cc:	469e      	mov	lr, r3
 80011ce:	4770      	bx	lr

080011d0 <_fini>:
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d2:	bf00      	nop
 80011d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d6:	bc08      	pop	{r3}
 80011d8:	469e      	mov	lr, r3
 80011da:	4770      	bx	lr
