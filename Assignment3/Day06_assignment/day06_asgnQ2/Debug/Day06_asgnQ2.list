
Day06_asgnQ2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800135c  0800135c  0000235c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001530  08001530  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001530  08001530  00002530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001538  08001538  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001538  08001538  00002538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800153c  0800153c  0000253c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001540  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003050  2**0
                  CONTENTS
 10 .bss          00000168  20000050  20000050  00003050  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001b8  200001b8  00003050  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011b6  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005b0  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  000047e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000be  00000000  00000000  00004900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018440  00000000  00000000  000049be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000198d  00000000  00000000  0001cdfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd2e  00000000  00000000  0001e78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa4b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000099c  00000000  00000000  000aa4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006c  00000000  00000000  000aaeb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000050 	.word	0x20000050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001344 	.word	0x08001344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000054 	.word	0x20000054
 80001cc:	08001344 	.word	0x08001344

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LedInit>:
Date: Sep 19, 2024
*/

#include "led.h"

void LedInit(uint32_t pin) {
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// enable GPIOD clock -- RCC AHB1ENR[GPIO_CLKEN] = 1
	RCC->AHB1ENR |= BV(GPIO_LED_CLKEN);
 8000288:	4b28      	ldr	r3, [pc, #160]	@ (800032c <LedInit+0xac>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028c:	4a27      	ldr	r2, [pc, #156]	@ (800032c <LedInit+0xac>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6313      	str	r3, [r2, #48]	@ 0x30
	// config GPIOD.pin as output -- MODER[2*pin+1:2*pin] - 01
	GPIO_LED->MODER &= ~BV(pin*2+1);
 8000294:	4b26      	ldr	r3, [pc, #152]	@ (8000330 <LedInit+0xb0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	687a      	ldr	r2, [r7, #4]
 800029a:	0052      	lsls	r2, r2, #1
 800029c:	3201      	adds	r2, #1
 800029e:	2101      	movs	r1, #1
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a21      	ldr	r2, [pc, #132]	@ (8000330 <LedInit+0xb0>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6013      	str	r3, [r2, #0]
	GPIO_LED->MODER |= BV(pin*2);
 80002ae:	4b20      	ldr	r3, [pc, #128]	@ (8000330 <LedInit+0xb0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	0052      	lsls	r2, r2, #1
 80002b6:	2101      	movs	r1, #1
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a1c      	ldr	r2, [pc, #112]	@ (8000330 <LedInit+0xb0>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6013      	str	r3, [r2, #0]
	// config GPIOD.pin as pushpull -- OTYPER[pin] - 0
	GPIO_LED->OTYPER &= ~BV(pin);
 80002c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000330 <LedInit+0xb0>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	2101      	movs	r1, #1
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	43d2      	mvns	r2, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a16      	ldr	r2, [pc, #88]	@ (8000330 <LedInit+0xb0>)
 80002d6:	400b      	ands	r3, r1
 80002d8:	6053      	str	r3, [r2, #4]
	// config GPIOD.pin as low-speed -- OSPEEDR[2*pin+1:2*pin] - 00
	GPIO_LED->OSPEEDR &= ~(BV(pin*2+1) | BV(pin*2));
 80002da:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <LedInit+0xb0>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	0052      	lsls	r2, r2, #1
 80002e2:	3201      	adds	r2, #1
 80002e4:	2101      	movs	r1, #1
 80002e6:	4091      	lsls	r1, r2
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	2001      	movs	r0, #1
 80002ee:	fa00 f202 	lsl.w	r2, r0, r2
 80002f2:	430a      	orrs	r2, r1
 80002f4:	43d2      	mvns	r2, r2
 80002f6:	4611      	mov	r1, r2
 80002f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000330 <LedInit+0xb0>)
 80002fa:	400b      	ands	r3, r1
 80002fc:	6093      	str	r3, [r2, #8]
	// config GPIOD.pin with no pullup & pulldown resistor PUPDR[2*pin+1:2*pin] -- 00
	GPIO_LED->PUPDR &= ~(BV(pin*2+1) | BV(pin*2));
 80002fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000330 <LedInit+0xb0>)
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	3201      	adds	r2, #1
 8000308:	2101      	movs	r1, #1
 800030a:	4091      	lsls	r1, r2
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	0052      	lsls	r2, r2, #1
 8000310:	2001      	movs	r0, #1
 8000312:	fa00 f202 	lsl.w	r2, r0, r2
 8000316:	430a      	orrs	r2, r1
 8000318:	43d2      	mvns	r2, r2
 800031a:	4611      	mov	r1, r2
 800031c:	4a04      	ldr	r2, [pc, #16]	@ (8000330 <LedInit+0xb0>)
 800031e:	400b      	ands	r3, r1
 8000320:	60d3      	str	r3, [r2, #12]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40023800 	.word	0x40023800
 8000330:	40020c00 	.word	0x40020c00

08000334 <LedOn>:

void LedOn(uint32_t pin) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 1
	GPIO_LED->ODR |= BV(pin);
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <LedOn+0x28>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	2101      	movs	r1, #1
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	4611      	mov	r1, r2
 800034a:	4a04      	ldr	r2, [pc, #16]	@ (800035c <LedOn+0x28>)
 800034c:	430b      	orrs	r3, r1
 800034e:	6153      	str	r3, [r2, #20]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40020c00 	.word	0x40020c00

08000360 <LedOff>:

void LedOff(uint32_t pin) {
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	// GPIOD.pin -- ODR[pin] = 0
	GPIO_LED->ODR &= ~BV(pin);
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <LedOff+0x28>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	2101      	movs	r1, #1
 800036e:	687a      	ldr	r2, [r7, #4]
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a03      	ldr	r2, [pc, #12]	@ (8000388 <LedOff+0x28>)
 800037a:	400b      	ands	r3, r1
 800037c:	6153      	str	r3, [r2, #20]
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40020c00 	.word	0x40020c00

0800038c <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b08a      	sub	sp, #40	@ 0x28
 8000390:	af00      	add	r7, sp, #0
	char str[32];
	SystemInit();
 8000392:	f000 f889 	bl	80004a8 <SystemInit>
	LedInit(LED_RED_PIN);
 8000396:	200e      	movs	r0, #14
 8000398:	f7ff ff72 	bl	8000280 <LedInit>
	LedInit(LED_BLUE_PIN);
 800039c:	200f      	movs	r0, #15
 800039e:	f7ff ff6f 	bl	8000280 <LedInit>
	UartInit(9600);
 80003a2:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80003a6:	f000 f8b5 	bl	8000514 <UartInit>
	//UartPuts("Select from menu:\r\n1.Red led On\r\n2.Red led Off\r\n3.Blue led On\r\n4.Blue led Off\r\n");

	//uint32_t count = 1;
	while(1){
		int choice;
		UartPuts("Select from menu:\r\n1.Red led On\r\n2.Red led Off\r\n3.Blue led On\r\n4.Blue led Off\r\n\n");
 80003aa:	481e      	ldr	r0, [pc, #120]	@ (8000424 <main+0x98>)
 80003ac:	f000 f92a 	bl	8000604 <UartPuts>
		//DelayMs(200);
		UartGets(str);
 80003b0:	f107 0308 	add.w	r3, r7, #8
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f957 	bl	8000668 <UartGets>
		sscanf(str, "%d", &choice);
 80003ba:	1d3a      	adds	r2, r7, #4
 80003bc:	f107 0308 	add.w	r3, r7, #8
 80003c0:	4919      	ldr	r1, [pc, #100]	@ (8000428 <main+0x9c>)
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 f9a0 	bl	8000708 <siscanf>

		switch(choice){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	3b01      	subs	r3, #1
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d8ec      	bhi.n	80003aa <main+0x1e>
 80003d0:	a201      	add	r2, pc, #4	@ (adr r2, 80003d8 <main+0x4c>)
 80003d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d6:	bf00      	nop
 80003d8:	080003e9 	.word	0x080003e9
 80003dc:	080003f7 	.word	0x080003f7
 80003e0:	08000405 	.word	0x08000405
 80003e4:	08000413 	.word	0x08000413
		case 1: LedOn(LED_RED_PIN);
 80003e8:	200e      	movs	r0, #14
 80003ea:	f7ff ffa3 	bl	8000334 <LedOn>
			UartPuts("Red led is On!\r\n\n");
 80003ee:	480f      	ldr	r0, [pc, #60]	@ (800042c <main+0xa0>)
 80003f0:	f000 f908 	bl	8000604 <UartPuts>
			break;
 80003f4:	e015      	b.n	8000422 <main+0x96>
		case 2: LedOff(LED_RED_PIN);
 80003f6:	200e      	movs	r0, #14
 80003f8:	f7ff ffb2 	bl	8000360 <LedOff>
			UartPuts("Red led is Off!\r\n");
 80003fc:	480c      	ldr	r0, [pc, #48]	@ (8000430 <main+0xa4>)
 80003fe:	f000 f901 	bl	8000604 <UartPuts>
			break;
 8000402:	e00e      	b.n	8000422 <main+0x96>
		case 3: LedOn(LED_BLUE_PIN);
 8000404:	200f      	movs	r0, #15
 8000406:	f7ff ff95 	bl	8000334 <LedOn>
			UartPuts("Blue led is On!\r\n\n");
 800040a:	480a      	ldr	r0, [pc, #40]	@ (8000434 <main+0xa8>)
 800040c:	f000 f8fa 	bl	8000604 <UartPuts>
			break;
 8000410:	e007      	b.n	8000422 <main+0x96>
		case 4: LedOff(LED_BLUE_PIN);
 8000412:	200f      	movs	r0, #15
 8000414:	f7ff ffa4 	bl	8000360 <LedOff>
			UartPuts("Blue led is Off!\r\n\n");
 8000418:	4807      	ldr	r0, [pc, #28]	@ (8000438 <main+0xac>)
 800041a:	f000 f8f3 	bl	8000604 <UartPuts>
			break;
 800041e:	bf00      	nop
 8000420:	e7c3      	b.n	80003aa <main+0x1e>
	while(1){
 8000422:	e7c2      	b.n	80003aa <main+0x1e>
 8000424:	0800135c 	.word	0x0800135c
 8000428:	080013b0 	.word	0x080013b0
 800042c:	080013b4 	.word	0x080013b4
 8000430:	080013c8 	.word	0x080013c8
 8000434:	080013dc 	.word	0x080013dc
 8000438:	080013f0 	.word	0x080013f0

0800043c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000444:	4a14      	ldr	r2, [pc, #80]	@ (8000498 <_sbrk+0x5c>)
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <_sbrk+0x60>)
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000450:	4b13      	ldr	r3, [pc, #76]	@ (80004a0 <_sbrk+0x64>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d102      	bne.n	800045e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000458:	4b11      	ldr	r3, [pc, #68]	@ (80004a0 <_sbrk+0x64>)
 800045a:	4a12      	ldr	r2, [pc, #72]	@ (80004a4 <_sbrk+0x68>)
 800045c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800045e:	4b10      	ldr	r3, [pc, #64]	@ (80004a0 <_sbrk+0x64>)
 8000460:	681a      	ldr	r2, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4413      	add	r3, r2
 8000466:	693a      	ldr	r2, [r7, #16]
 8000468:	429a      	cmp	r2, r3
 800046a:	d207      	bcs.n	800047c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800046c:	f000 f978 	bl	8000760 <__errno>
 8000470:	4603      	mov	r3, r0
 8000472:	220c      	movs	r2, #12
 8000474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800047a:	e009      	b.n	8000490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <_sbrk+0x64>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000482:	4b07      	ldr	r3, [pc, #28]	@ (80004a0 <_sbrk+0x64>)
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4413      	add	r3, r2
 800048a:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <_sbrk+0x64>)
 800048c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800048e:	68fb      	ldr	r3, [r7, #12]
}
 8000490:	4618      	mov	r0, r3
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20020000 	.word	0x20020000
 800049c:	00000400 	.word	0x00000400
 80004a0:	2000006c 	.word	0x2000006c
 80004a4:	200001b8 	.word	0x200001b8

080004a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  DWT_Init();
 80004ac:	f000 f802 	bl	80004b4 <DWT_Init>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004b8:	4b14      	ldr	r3, [pc, #80]	@ (800050c <DWT_Init+0x58>)
 80004ba:	68db      	ldr	r3, [r3, #12]
 80004bc:	4a13      	ldr	r2, [pc, #76]	@ (800050c <DWT_Init+0x58>)
 80004be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80004c2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004c4:	4b11      	ldr	r3, [pc, #68]	@ (800050c <DWT_Init+0x58>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a10      	ldr	r2, [pc, #64]	@ (800050c <DWT_Init+0x58>)
 80004ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004ce:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <DWT_Init+0x5c>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000510 <DWT_Init+0x5c>)
 80004d6:	f023 0301 	bic.w	r3, r3, #1
 80004da:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <DWT_Init+0x5c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <DWT_Init+0x5c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80004e8:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <DWT_Init+0x5c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80004ee:	bf00      	nop
    __ASM volatile ("NOP");
 80004f0:	bf00      	nop
    __ASM volatile ("NOP");
 80004f2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <DWT_Init+0x5c>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	bf0c      	ite	eq
 80004fc:	2301      	moveq	r3, #1
 80004fe:	2300      	movne	r3, #0
 8000500:	b2db      	uxtb	r3, r3
}
 8000502:	4618      	mov	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	bc80      	pop	{r7}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000edf0 	.word	0xe000edf0
 8000510:	e0001000 	.word	0xe0001000

08000514 <UartInit>:
 */

#include <uart_menu.h>
//volatile uint32_t flag = 0;

void UartInit(uint32_t baud){
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(GPIO_CLK_EN);
 800051c:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <UartInit+0xb8>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	4a2a      	ldr	r2, [pc, #168]	@ (80005cc <UartInit+0xb8>)
 8000522:	f043 0301 	orr.w	r3, r3, #1
 8000526:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIO_UART->MODER |= (BV(GPIO_TX_PIN*2+1) | BV(GPIO_RX_PIN*2+1));
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <UartInit+0xbc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a28      	ldr	r2, [pc, #160]	@ (80005d0 <UartInit+0xbc>)
 800052e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000532:	6013      	str	r3, [r2, #0]
	GPIO_UART->MODER &= ~(BV(GPIO_TX_PIN*2) | (GPIO_RX_PIN*2));
 8000534:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <UartInit+0xbc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a25      	ldr	r2, [pc, #148]	@ (80005d0 <UartInit+0xbc>)
 800053a:	f023 0316 	bic.w	r3, r3, #22
 800053e:	6013      	str	r3, [r2, #0]

	GPIO_UART->AFR[0] |= BV(8) | BV(9) | BV(10) |BV(12) |BV(13) |BV(14);
 8000540:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <UartInit+0xbc>)
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	4a22      	ldr	r2, [pc, #136]	@ (80005d0 <UartInit+0xbc>)
 8000546:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800054a:	6213      	str	r3, [r2, #32]
	GPIO_UART->AFR[0] &= ~(BV(11) | BV(15));
 800054c:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <UartInit+0xbc>)
 800054e:	6a1b      	ldr	r3, [r3, #32]
 8000550:	4a1f      	ldr	r2, [pc, #124]	@ (80005d0 <UartInit+0xbc>)
 8000552:	f423 4308 	bic.w	r3, r3, #34816	@ 0x8800
 8000556:	6213      	str	r3, [r2, #32]

	// enable uart clock -- APB1ENR.17
	RCC->APB1ENR |= BV(UART_CLK_EN);
 8000558:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <UartInit+0xb8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a1b      	ldr	r2, [pc, #108]	@ (80005cc <UartInit+0xb8>)
 800055e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
	// enable transmission and reception on uart
	UART->CR1 = (USART_CR1_TE) | (USART_CR1_RE);
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <UartInit+0xc0>)
 8000566:	220c      	movs	r2, #12
 8000568:	60da      	str	r2, [r3, #12]
	// set word length in CR1 -- M bit = 8-bit data len, Over8 = 0
	UART->CR1 &= ~((USART_CR1_M) | (USART_CR1_OVER8));
 800056a:	4b1a      	ldr	r3, [pc, #104]	@ (80005d4 <UartInit+0xc0>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	4a19      	ldr	r2, [pc, #100]	@ (80005d4 <UartInit+0xc0>)
 8000570:	f423 4310 	bic.w	r3, r3, #36864	@ 0x9000
 8000574:	60d3      	str	r3, [r2, #12]
	// set stop bits in CR2 -- 1 stop bit
	UART->CR2 &= ~(USART_CR2_STOP_0 | USART_CR2_STOP_1);
 8000576:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <UartInit+0xc0>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	4a16      	ldr	r2, [pc, #88]	@ (80005d4 <UartInit+0xc0>)
 800057c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000580:	6113      	str	r3, [r2, #16]
	// set baud rate -- UBRR
	if(baud == 9600)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000588:	d104      	bne.n	8000594 <UartInit+0x80>
		UART->BRR = BAUD_9600;
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <UartInit+0xc0>)
 800058c:	f240 6283 	movw	r2, #1667	@ 0x683
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	e00f      	b.n	80005b4 <UartInit+0xa0>
	else if(baud == 38400)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800059a:	d104      	bne.n	80005a6 <UartInit+0x92>
		UART->BRR = BAUD_38400;
 800059c:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <UartInit+0xc0>)
 800059e:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	e006      	b.n	80005b4 <UartInit+0xa0>
	else if(baud == 115200)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80005ac:	d102      	bne.n	80005b4 <UartInit+0xa0>
		UART->BRR = BAUD_115200;
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <UartInit+0xc0>)
 80005b0:	228b      	movs	r2, #139	@ 0x8b
 80005b2:	609a      	str	r2, [r3, #8]

	// enable USART interrupt in NVIC
	//NVIC_EnableIRQ(USART2_IRQn);
	// enable uart in CR1 -- UE bit
	UART->CR1 |= USART_CR1_UE ;
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <UartInit+0xc0>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a06      	ldr	r2, [pc, #24]	@ (80005d4 <UartInit+0xc0>)
 80005ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005be:	60d3      	str	r3, [r2, #12]

}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bc80      	pop	{r7}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40004400 	.word	0x40004400

080005d8 <UartPutch>:

void UartPutch(uint32_t ch){
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	UART->DR = ch;
 80005e0:	4a07      	ldr	r2, [pc, #28]	@ (8000600 <UartPutch+0x28>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6053      	str	r3, [r2, #4]

	while((UART->SR & USART_SR_TXE) == 0)
 80005e6:	bf00      	nop
 80005e8:	4b05      	ldr	r3, [pc, #20]	@ (8000600 <UartPutch+0x28>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d0f9      	beq.n	80005e8 <UartPutch+0x10>
		;
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	40004400 	.word	0x40004400

08000604 <UartPuts>:


void UartPuts(char str[]){
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e009      	b.n	8000626 <UartPuts+0x22>
		UartPutch((uint8_t)str[i]);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffdc 	bl	80005d8 <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	3301      	adds	r3, #1
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d1ef      	bne.n	8000612 <UartPuts+0xe>
}
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <UartGetch>:

uint8_t UartGetch(void){
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	while((UART->SR & (USART_SR_RXNE)) == 0)
 8000642:	bf00      	nop
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <UartGetch+0x28>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <UartGetch+0x8>
		;

	char ch = UART->DR;
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <UartGetch+0x28>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000656:	79fb      	ldrb	r3, [r7, #7]
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40004400 	.word	0x40004400

08000668 <UartGets>:

void UartGets(char str[]){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	char ch;
	int i = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
	do{
		ch = UartGetch();
 8000674:	f7ff ffe2 	bl	800063c <UartGetch>
 8000678:	4603      	mov	r3, r0
 800067a:	72fb      	strb	r3, [r7, #11]
		str[i] = ch;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	7afa      	ldrb	r2, [r7, #11]
 8000684:	701a      	strb	r2, [r3, #0]
		i++;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
	}while(ch != '\r');
 800068c:	7afb      	ldrb	r3, [r7, #11]
 800068e:	2b0d      	cmp	r3, #13
 8000690:	d1f0      	bne.n	8000674 <UartGets+0xc>
	str[i++] = '\n';
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1c5a      	adds	r2, r3, #1
 8000696:	60fa      	str	r2, [r7, #12]
 8000698:	461a      	mov	r2, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	220a      	movs	r2, #10
 80006a0:	701a      	strb	r2, [r3, #0]
	str[i] = '\0';
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b4:	480d      	ldr	r0, [pc, #52]	@ (80006ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b8:	f7ff fef6 	bl	80004a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480c      	ldr	r0, [pc, #48]	@ (80006f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006be:	490d      	ldr	r1, [pc, #52]	@ (80006f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c0:	4a0d      	ldr	r2, [pc, #52]	@ (80006f8 <LoopForever+0xe>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000700 <LoopForever+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006e2:	f000 f843 	bl	800076c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e6:	f7ff fe51 	bl	800038c <main>

080006ea <LoopForever>:

LoopForever:
  b LoopForever
 80006ea:	e7fe      	b.n	80006ea <LoopForever>
  ldr   r0, =_estack
 80006ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80006f8:	08001540 	.word	0x08001540
  ldr r2, =_sbss
 80006fc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000700:	200001b8 	.word	0x200001b8

08000704 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC_IRQHandler>
	...

08000708 <siscanf>:
 8000708:	b40e      	push	{r1, r2, r3}
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	b09c      	sub	sp, #112	@ 0x70
 800070e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000710:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000714:	f854 5b04 	ldr.w	r5, [r4], #4
 8000718:	f8ad 2014 	strh.w	r2, [sp, #20]
 800071c:	9002      	str	r0, [sp, #8]
 800071e:	9006      	str	r0, [sp, #24]
 8000720:	f7ff fd56 	bl	80001d0 <strlen>
 8000724:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <siscanf+0x4c>)
 8000726:	9003      	str	r0, [sp, #12]
 8000728:	9007      	str	r0, [sp, #28]
 800072a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800072c:	480a      	ldr	r0, [pc, #40]	@ (8000758 <siscanf+0x50>)
 800072e:	9401      	str	r4, [sp, #4]
 8000730:	2300      	movs	r3, #0
 8000732:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000734:	9314      	str	r3, [sp, #80]	@ 0x50
 8000736:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800073a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800073e:	462a      	mov	r2, r5
 8000740:	4623      	mov	r3, r4
 8000742:	a902      	add	r1, sp, #8
 8000744:	6800      	ldr	r0, [r0, #0]
 8000746:	f000 f987 	bl	8000a58 <__ssvfiscanf_r>
 800074a:	b01c      	add	sp, #112	@ 0x70
 800074c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000750:	b003      	add	sp, #12
 8000752:	4770      	bx	lr
 8000754:	0800075d 	.word	0x0800075d
 8000758:	20000000 	.word	0x20000000

0800075c <__seofread>:
 800075c:	2000      	movs	r0, #0
 800075e:	4770      	bx	lr

08000760 <__errno>:
 8000760:	4b01      	ldr	r3, [pc, #4]	@ (8000768 <__errno+0x8>)
 8000762:	6818      	ldr	r0, [r3, #0]
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000000 	.word	0x20000000

0800076c <__libc_init_array>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	4d0d      	ldr	r5, [pc, #52]	@ (80007a4 <__libc_init_array+0x38>)
 8000770:	4c0d      	ldr	r4, [pc, #52]	@ (80007a8 <__libc_init_array+0x3c>)
 8000772:	1b64      	subs	r4, r4, r5
 8000774:	10a4      	asrs	r4, r4, #2
 8000776:	2600      	movs	r6, #0
 8000778:	42a6      	cmp	r6, r4
 800077a:	d109      	bne.n	8000790 <__libc_init_array+0x24>
 800077c:	4d0b      	ldr	r5, [pc, #44]	@ (80007ac <__libc_init_array+0x40>)
 800077e:	4c0c      	ldr	r4, [pc, #48]	@ (80007b0 <__libc_init_array+0x44>)
 8000780:	f000 fde0 	bl	8001344 <_init>
 8000784:	1b64      	subs	r4, r4, r5
 8000786:	10a4      	asrs	r4, r4, #2
 8000788:	2600      	movs	r6, #0
 800078a:	42a6      	cmp	r6, r4
 800078c:	d105      	bne.n	800079a <__libc_init_array+0x2e>
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f855 3b04 	ldr.w	r3, [r5], #4
 8000794:	4798      	blx	r3
 8000796:	3601      	adds	r6, #1
 8000798:	e7ee      	b.n	8000778 <__libc_init_array+0xc>
 800079a:	f855 3b04 	ldr.w	r3, [r5], #4
 800079e:	4798      	blx	r3
 80007a0:	3601      	adds	r6, #1
 80007a2:	e7f2      	b.n	800078a <__libc_init_array+0x1e>
 80007a4:	08001538 	.word	0x08001538
 80007a8:	08001538 	.word	0x08001538
 80007ac:	08001538 	.word	0x08001538
 80007b0:	0800153c 	.word	0x0800153c

080007b4 <__retarget_lock_acquire_recursive>:
 80007b4:	4770      	bx	lr

080007b6 <__retarget_lock_release_recursive>:
 80007b6:	4770      	bx	lr

080007b8 <_free_r>:
 80007b8:	b538      	push	{r3, r4, r5, lr}
 80007ba:	4605      	mov	r5, r0
 80007bc:	2900      	cmp	r1, #0
 80007be:	d041      	beq.n	8000844 <_free_r+0x8c>
 80007c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007c4:	1f0c      	subs	r4, r1, #4
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	bfb8      	it	lt
 80007ca:	18e4      	addlt	r4, r4, r3
 80007cc:	f000 f8e0 	bl	8000990 <__malloc_lock>
 80007d0:	4a1d      	ldr	r2, [pc, #116]	@ (8000848 <_free_r+0x90>)
 80007d2:	6813      	ldr	r3, [r2, #0]
 80007d4:	b933      	cbnz	r3, 80007e4 <_free_r+0x2c>
 80007d6:	6063      	str	r3, [r4, #4]
 80007d8:	6014      	str	r4, [r2, #0]
 80007da:	4628      	mov	r0, r5
 80007dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80007e0:	f000 b8dc 	b.w	800099c <__malloc_unlock>
 80007e4:	42a3      	cmp	r3, r4
 80007e6:	d908      	bls.n	80007fa <_free_r+0x42>
 80007e8:	6820      	ldr	r0, [r4, #0]
 80007ea:	1821      	adds	r1, r4, r0
 80007ec:	428b      	cmp	r3, r1
 80007ee:	bf01      	itttt	eq
 80007f0:	6819      	ldreq	r1, [r3, #0]
 80007f2:	685b      	ldreq	r3, [r3, #4]
 80007f4:	1809      	addeq	r1, r1, r0
 80007f6:	6021      	streq	r1, [r4, #0]
 80007f8:	e7ed      	b.n	80007d6 <_free_r+0x1e>
 80007fa:	461a      	mov	r2, r3
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	b10b      	cbz	r3, 8000804 <_free_r+0x4c>
 8000800:	42a3      	cmp	r3, r4
 8000802:	d9fa      	bls.n	80007fa <_free_r+0x42>
 8000804:	6811      	ldr	r1, [r2, #0]
 8000806:	1850      	adds	r0, r2, r1
 8000808:	42a0      	cmp	r0, r4
 800080a:	d10b      	bne.n	8000824 <_free_r+0x6c>
 800080c:	6820      	ldr	r0, [r4, #0]
 800080e:	4401      	add	r1, r0
 8000810:	1850      	adds	r0, r2, r1
 8000812:	4283      	cmp	r3, r0
 8000814:	6011      	str	r1, [r2, #0]
 8000816:	d1e0      	bne.n	80007da <_free_r+0x22>
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	6053      	str	r3, [r2, #4]
 800081e:	4408      	add	r0, r1
 8000820:	6010      	str	r0, [r2, #0]
 8000822:	e7da      	b.n	80007da <_free_r+0x22>
 8000824:	d902      	bls.n	800082c <_free_r+0x74>
 8000826:	230c      	movs	r3, #12
 8000828:	602b      	str	r3, [r5, #0]
 800082a:	e7d6      	b.n	80007da <_free_r+0x22>
 800082c:	6820      	ldr	r0, [r4, #0]
 800082e:	1821      	adds	r1, r4, r0
 8000830:	428b      	cmp	r3, r1
 8000832:	bf04      	itt	eq
 8000834:	6819      	ldreq	r1, [r3, #0]
 8000836:	685b      	ldreq	r3, [r3, #4]
 8000838:	6063      	str	r3, [r4, #4]
 800083a:	bf04      	itt	eq
 800083c:	1809      	addeq	r1, r1, r0
 800083e:	6021      	streq	r1, [r4, #0]
 8000840:	6054      	str	r4, [r2, #4]
 8000842:	e7ca      	b.n	80007da <_free_r+0x22>
 8000844:	bd38      	pop	{r3, r4, r5, pc}
 8000846:	bf00      	nop
 8000848:	200001b4 	.word	0x200001b4

0800084c <sbrk_aligned>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	4e0f      	ldr	r6, [pc, #60]	@ (800088c <sbrk_aligned+0x40>)
 8000850:	460c      	mov	r4, r1
 8000852:	6831      	ldr	r1, [r6, #0]
 8000854:	4605      	mov	r5, r0
 8000856:	b911      	cbnz	r1, 800085e <sbrk_aligned+0x12>
 8000858:	f000 fc34 	bl	80010c4 <_sbrk_r>
 800085c:	6030      	str	r0, [r6, #0]
 800085e:	4621      	mov	r1, r4
 8000860:	4628      	mov	r0, r5
 8000862:	f000 fc2f 	bl	80010c4 <_sbrk_r>
 8000866:	1c43      	adds	r3, r0, #1
 8000868:	d103      	bne.n	8000872 <sbrk_aligned+0x26>
 800086a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800086e:	4620      	mov	r0, r4
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	1cc4      	adds	r4, r0, #3
 8000874:	f024 0403 	bic.w	r4, r4, #3
 8000878:	42a0      	cmp	r0, r4
 800087a:	d0f8      	beq.n	800086e <sbrk_aligned+0x22>
 800087c:	1a21      	subs	r1, r4, r0
 800087e:	4628      	mov	r0, r5
 8000880:	f000 fc20 	bl	80010c4 <_sbrk_r>
 8000884:	3001      	adds	r0, #1
 8000886:	d1f2      	bne.n	800086e <sbrk_aligned+0x22>
 8000888:	e7ef      	b.n	800086a <sbrk_aligned+0x1e>
 800088a:	bf00      	nop
 800088c:	200001b0 	.word	0x200001b0

08000890 <_malloc_r>:
 8000890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000894:	1ccd      	adds	r5, r1, #3
 8000896:	f025 0503 	bic.w	r5, r5, #3
 800089a:	3508      	adds	r5, #8
 800089c:	2d0c      	cmp	r5, #12
 800089e:	bf38      	it	cc
 80008a0:	250c      	movcc	r5, #12
 80008a2:	2d00      	cmp	r5, #0
 80008a4:	4606      	mov	r6, r0
 80008a6:	db01      	blt.n	80008ac <_malloc_r+0x1c>
 80008a8:	42a9      	cmp	r1, r5
 80008aa:	d904      	bls.n	80008b6 <_malloc_r+0x26>
 80008ac:	230c      	movs	r3, #12
 80008ae:	6033      	str	r3, [r6, #0]
 80008b0:	2000      	movs	r0, #0
 80008b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800098c <_malloc_r+0xfc>
 80008ba:	f000 f869 	bl	8000990 <__malloc_lock>
 80008be:	f8d8 3000 	ldr.w	r3, [r8]
 80008c2:	461c      	mov	r4, r3
 80008c4:	bb44      	cbnz	r4, 8000918 <_malloc_r+0x88>
 80008c6:	4629      	mov	r1, r5
 80008c8:	4630      	mov	r0, r6
 80008ca:	f7ff ffbf 	bl	800084c <sbrk_aligned>
 80008ce:	1c43      	adds	r3, r0, #1
 80008d0:	4604      	mov	r4, r0
 80008d2:	d158      	bne.n	8000986 <_malloc_r+0xf6>
 80008d4:	f8d8 4000 	ldr.w	r4, [r8]
 80008d8:	4627      	mov	r7, r4
 80008da:	2f00      	cmp	r7, #0
 80008dc:	d143      	bne.n	8000966 <_malloc_r+0xd6>
 80008de:	2c00      	cmp	r4, #0
 80008e0:	d04b      	beq.n	800097a <_malloc_r+0xea>
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	4639      	mov	r1, r7
 80008e6:	4630      	mov	r0, r6
 80008e8:	eb04 0903 	add.w	r9, r4, r3
 80008ec:	f000 fbea 	bl	80010c4 <_sbrk_r>
 80008f0:	4581      	cmp	r9, r0
 80008f2:	d142      	bne.n	800097a <_malloc_r+0xea>
 80008f4:	6821      	ldr	r1, [r4, #0]
 80008f6:	1a6d      	subs	r5, r5, r1
 80008f8:	4629      	mov	r1, r5
 80008fa:	4630      	mov	r0, r6
 80008fc:	f7ff ffa6 	bl	800084c <sbrk_aligned>
 8000900:	3001      	adds	r0, #1
 8000902:	d03a      	beq.n	800097a <_malloc_r+0xea>
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	442b      	add	r3, r5
 8000908:	6023      	str	r3, [r4, #0]
 800090a:	f8d8 3000 	ldr.w	r3, [r8]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	bb62      	cbnz	r2, 800096c <_malloc_r+0xdc>
 8000912:	f8c8 7000 	str.w	r7, [r8]
 8000916:	e00f      	b.n	8000938 <_malloc_r+0xa8>
 8000918:	6822      	ldr	r2, [r4, #0]
 800091a:	1b52      	subs	r2, r2, r5
 800091c:	d420      	bmi.n	8000960 <_malloc_r+0xd0>
 800091e:	2a0b      	cmp	r2, #11
 8000920:	d917      	bls.n	8000952 <_malloc_r+0xc2>
 8000922:	1961      	adds	r1, r4, r5
 8000924:	42a3      	cmp	r3, r4
 8000926:	6025      	str	r5, [r4, #0]
 8000928:	bf18      	it	ne
 800092a:	6059      	strne	r1, [r3, #4]
 800092c:	6863      	ldr	r3, [r4, #4]
 800092e:	bf08      	it	eq
 8000930:	f8c8 1000 	streq.w	r1, [r8]
 8000934:	5162      	str	r2, [r4, r5]
 8000936:	604b      	str	r3, [r1, #4]
 8000938:	4630      	mov	r0, r6
 800093a:	f000 f82f 	bl	800099c <__malloc_unlock>
 800093e:	f104 000b 	add.w	r0, r4, #11
 8000942:	1d23      	adds	r3, r4, #4
 8000944:	f020 0007 	bic.w	r0, r0, #7
 8000948:	1ac2      	subs	r2, r0, r3
 800094a:	bf1c      	itt	ne
 800094c:	1a1b      	subne	r3, r3, r0
 800094e:	50a3      	strne	r3, [r4, r2]
 8000950:	e7af      	b.n	80008b2 <_malloc_r+0x22>
 8000952:	6862      	ldr	r2, [r4, #4]
 8000954:	42a3      	cmp	r3, r4
 8000956:	bf0c      	ite	eq
 8000958:	f8c8 2000 	streq.w	r2, [r8]
 800095c:	605a      	strne	r2, [r3, #4]
 800095e:	e7eb      	b.n	8000938 <_malloc_r+0xa8>
 8000960:	4623      	mov	r3, r4
 8000962:	6864      	ldr	r4, [r4, #4]
 8000964:	e7ae      	b.n	80008c4 <_malloc_r+0x34>
 8000966:	463c      	mov	r4, r7
 8000968:	687f      	ldr	r7, [r7, #4]
 800096a:	e7b6      	b.n	80008da <_malloc_r+0x4a>
 800096c:	461a      	mov	r2, r3
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	42a3      	cmp	r3, r4
 8000972:	d1fb      	bne.n	800096c <_malloc_r+0xdc>
 8000974:	2300      	movs	r3, #0
 8000976:	6053      	str	r3, [r2, #4]
 8000978:	e7de      	b.n	8000938 <_malloc_r+0xa8>
 800097a:	230c      	movs	r3, #12
 800097c:	6033      	str	r3, [r6, #0]
 800097e:	4630      	mov	r0, r6
 8000980:	f000 f80c 	bl	800099c <__malloc_unlock>
 8000984:	e794      	b.n	80008b0 <_malloc_r+0x20>
 8000986:	6005      	str	r5, [r0, #0]
 8000988:	e7d6      	b.n	8000938 <_malloc_r+0xa8>
 800098a:	bf00      	nop
 800098c:	200001b4 	.word	0x200001b4

08000990 <__malloc_lock>:
 8000990:	4801      	ldr	r0, [pc, #4]	@ (8000998 <__malloc_lock+0x8>)
 8000992:	f7ff bf0f 	b.w	80007b4 <__retarget_lock_acquire_recursive>
 8000996:	bf00      	nop
 8000998:	200001ac 	.word	0x200001ac

0800099c <__malloc_unlock>:
 800099c:	4801      	ldr	r0, [pc, #4]	@ (80009a4 <__malloc_unlock+0x8>)
 800099e:	f7ff bf0a 	b.w	80007b6 <__retarget_lock_release_recursive>
 80009a2:	bf00      	nop
 80009a4:	200001ac 	.word	0x200001ac

080009a8 <_sungetc_r>:
 80009a8:	b538      	push	{r3, r4, r5, lr}
 80009aa:	1c4b      	adds	r3, r1, #1
 80009ac:	4614      	mov	r4, r2
 80009ae:	d103      	bne.n	80009b8 <_sungetc_r+0x10>
 80009b0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80009b4:	4628      	mov	r0, r5
 80009b6:	bd38      	pop	{r3, r4, r5, pc}
 80009b8:	8993      	ldrh	r3, [r2, #12]
 80009ba:	f023 0320 	bic.w	r3, r3, #32
 80009be:	8193      	strh	r3, [r2, #12]
 80009c0:	6853      	ldr	r3, [r2, #4]
 80009c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80009c4:	b2cd      	uxtb	r5, r1
 80009c6:	b18a      	cbz	r2, 80009ec <_sungetc_r+0x44>
 80009c8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dd08      	ble.n	80009e0 <_sungetc_r+0x38>
 80009ce:	6823      	ldr	r3, [r4, #0]
 80009d0:	1e5a      	subs	r2, r3, #1
 80009d2:	6022      	str	r2, [r4, #0]
 80009d4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	3301      	adds	r3, #1
 80009dc:	6063      	str	r3, [r4, #4]
 80009de:	e7e9      	b.n	80009b4 <_sungetc_r+0xc>
 80009e0:	4621      	mov	r1, r4
 80009e2:	f000 fb34 	bl	800104e <__submore>
 80009e6:	2800      	cmp	r0, #0
 80009e8:	d0f1      	beq.n	80009ce <_sungetc_r+0x26>
 80009ea:	e7e1      	b.n	80009b0 <_sungetc_r+0x8>
 80009ec:	6921      	ldr	r1, [r4, #16]
 80009ee:	6822      	ldr	r2, [r4, #0]
 80009f0:	b141      	cbz	r1, 8000a04 <_sungetc_r+0x5c>
 80009f2:	4291      	cmp	r1, r2
 80009f4:	d206      	bcs.n	8000a04 <_sungetc_r+0x5c>
 80009f6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80009fa:	42a9      	cmp	r1, r5
 80009fc:	d102      	bne.n	8000a04 <_sungetc_r+0x5c>
 80009fe:	3a01      	subs	r2, #1
 8000a00:	6022      	str	r2, [r4, #0]
 8000a02:	e7ea      	b.n	80009da <_sungetc_r+0x32>
 8000a04:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000a08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a0e:	2303      	movs	r3, #3
 8000a10:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000a12:	4623      	mov	r3, r4
 8000a14:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e7de      	b.n	80009dc <_sungetc_r+0x34>

08000a1e <__ssrefill_r>:
 8000a1e:	b510      	push	{r4, lr}
 8000a20:	460c      	mov	r4, r1
 8000a22:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000a24:	b169      	cbz	r1, 8000a42 <__ssrefill_r+0x24>
 8000a26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	d001      	beq.n	8000a32 <__ssrefill_r+0x14>
 8000a2e:	f7ff fec3 	bl	80007b8 <_free_r>
 8000a32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000a34:	6063      	str	r3, [r4, #4]
 8000a36:	2000      	movs	r0, #0
 8000a38:	6360      	str	r0, [r4, #52]	@ 0x34
 8000a3a:	b113      	cbz	r3, 8000a42 <__ssrefill_r+0x24>
 8000a3c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000a3e:	6023      	str	r3, [r4, #0]
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	6923      	ldr	r3, [r4, #16]
 8000a44:	6023      	str	r3, [r4, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	6063      	str	r3, [r4, #4]
 8000a4a:	89a3      	ldrh	r3, [r4, #12]
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	81a3      	strh	r3, [r4, #12]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a56:	e7f3      	b.n	8000a40 <__ssrefill_r+0x22>

08000a58 <__ssvfiscanf_r>:
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000a62:	2100      	movs	r1, #0
 8000a64:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000a68:	49a5      	ldr	r1, [pc, #660]	@ (8000d00 <__ssvfiscanf_r+0x2a8>)
 8000a6a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000a6c:	f10d 0804 	add.w	r8, sp, #4
 8000a70:	49a4      	ldr	r1, [pc, #656]	@ (8000d04 <__ssvfiscanf_r+0x2ac>)
 8000a72:	4fa5      	ldr	r7, [pc, #660]	@ (8000d08 <__ssvfiscanf_r+0x2b0>)
 8000a74:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000a78:	4606      	mov	r6, r0
 8000a7a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000a7c:	9300      	str	r3, [sp, #0]
 8000a7e:	7813      	ldrb	r3, [r2, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 8158 	beq.w	8000d36 <__ssvfiscanf_r+0x2de>
 8000a86:	5cf9      	ldrb	r1, [r7, r3]
 8000a88:	f011 0108 	ands.w	r1, r1, #8
 8000a8c:	f102 0501 	add.w	r5, r2, #1
 8000a90:	d019      	beq.n	8000ac6 <__ssvfiscanf_r+0x6e>
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	dd0f      	ble.n	8000ab8 <__ssvfiscanf_r+0x60>
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	5cba      	ldrb	r2, [r7, r2]
 8000a9e:	0712      	lsls	r2, r2, #28
 8000aa0:	d401      	bmi.n	8000aa6 <__ssvfiscanf_r+0x4e>
 8000aa2:	462a      	mov	r2, r5
 8000aa4:	e7eb      	b.n	8000a7e <__ssvfiscanf_r+0x26>
 8000aa6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000aa8:	3201      	adds	r2, #1
 8000aaa:	9245      	str	r2, [sp, #276]	@ 0x114
 8000aac:	6862      	ldr	r2, [r4, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	3a01      	subs	r2, #1
 8000ab2:	6062      	str	r2, [r4, #4]
 8000ab4:	6023      	str	r3, [r4, #0]
 8000ab6:	e7ec      	b.n	8000a92 <__ssvfiscanf_r+0x3a>
 8000ab8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000aba:	4621      	mov	r1, r4
 8000abc:	4630      	mov	r0, r6
 8000abe:	4798      	blx	r3
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d0e9      	beq.n	8000a98 <__ssvfiscanf_r+0x40>
 8000ac4:	e7ed      	b.n	8000aa2 <__ssvfiscanf_r+0x4a>
 8000ac6:	2b25      	cmp	r3, #37	@ 0x25
 8000ac8:	d012      	beq.n	8000af0 <__ssvfiscanf_r+0x98>
 8000aca:	4699      	mov	r9, r3
 8000acc:	6863      	ldr	r3, [r4, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f340 8093 	ble.w	8000bfa <__ssvfiscanf_r+0x1a2>
 8000ad4:	6822      	ldr	r2, [r4, #0]
 8000ad6:	7813      	ldrb	r3, [r2, #0]
 8000ad8:	454b      	cmp	r3, r9
 8000ada:	f040 812c 	bne.w	8000d36 <__ssvfiscanf_r+0x2de>
 8000ade:	6863      	ldr	r3, [r4, #4]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	6063      	str	r3, [r4, #4]
 8000ae4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000ae6:	3201      	adds	r2, #1
 8000ae8:	3301      	adds	r3, #1
 8000aea:	6022      	str	r2, [r4, #0]
 8000aec:	9345      	str	r3, [sp, #276]	@ 0x114
 8000aee:	e7d8      	b.n	8000aa2 <__ssvfiscanf_r+0x4a>
 8000af0:	9141      	str	r1, [sp, #260]	@ 0x104
 8000af2:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000af4:	7853      	ldrb	r3, [r2, #1]
 8000af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8000af8:	bf02      	ittt	eq
 8000afa:	2310      	moveq	r3, #16
 8000afc:	1c95      	addeq	r5, r2, #2
 8000afe:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000b00:	220a      	movs	r2, #10
 8000b02:	46a9      	mov	r9, r5
 8000b04:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000b08:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000b0c:	2b09      	cmp	r3, #9
 8000b0e:	d91e      	bls.n	8000b4e <__ssvfiscanf_r+0xf6>
 8000b10:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8000d0c <__ssvfiscanf_r+0x2b4>
 8000b14:	2203      	movs	r2, #3
 8000b16:	4650      	mov	r0, sl
 8000b18:	f7ff fb62 	bl	80001e0 <memchr>
 8000b1c:	b138      	cbz	r0, 8000b2e <__ssvfiscanf_r+0xd6>
 8000b1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000b20:	eba0 000a 	sub.w	r0, r0, sl
 8000b24:	2301      	movs	r3, #1
 8000b26:	4083      	lsls	r3, r0
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	9341      	str	r3, [sp, #260]	@ 0x104
 8000b2c:	464d      	mov	r5, r9
 8000b2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000b32:	2b78      	cmp	r3, #120	@ 0x78
 8000b34:	d806      	bhi.n	8000b44 <__ssvfiscanf_r+0xec>
 8000b36:	2b57      	cmp	r3, #87	@ 0x57
 8000b38:	d810      	bhi.n	8000b5c <__ssvfiscanf_r+0x104>
 8000b3a:	2b25      	cmp	r3, #37	@ 0x25
 8000b3c:	d0c5      	beq.n	8000aca <__ssvfiscanf_r+0x72>
 8000b3e:	d857      	bhi.n	8000bf0 <__ssvfiscanf_r+0x198>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d065      	beq.n	8000c10 <__ssvfiscanf_r+0x1b8>
 8000b44:	2303      	movs	r3, #3
 8000b46:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000b48:	230a      	movs	r3, #10
 8000b4a:	9342      	str	r3, [sp, #264]	@ 0x108
 8000b4c:	e078      	b.n	8000c40 <__ssvfiscanf_r+0x1e8>
 8000b4e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000b50:	fb02 1103 	mla	r1, r2, r3, r1
 8000b54:	3930      	subs	r1, #48	@ 0x30
 8000b56:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000b58:	464d      	mov	r5, r9
 8000b5a:	e7d2      	b.n	8000b02 <__ssvfiscanf_r+0xaa>
 8000b5c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000b60:	2a20      	cmp	r2, #32
 8000b62:	d8ef      	bhi.n	8000b44 <__ssvfiscanf_r+0xec>
 8000b64:	a101      	add	r1, pc, #4	@ (adr r1, 8000b6c <__ssvfiscanf_r+0x114>)
 8000b66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000b6a:	bf00      	nop
 8000b6c:	08000c1f 	.word	0x08000c1f
 8000b70:	08000b45 	.word	0x08000b45
 8000b74:	08000b45 	.word	0x08000b45
 8000b78:	08000c79 	.word	0x08000c79
 8000b7c:	08000b45 	.word	0x08000b45
 8000b80:	08000b45 	.word	0x08000b45
 8000b84:	08000b45 	.word	0x08000b45
 8000b88:	08000b45 	.word	0x08000b45
 8000b8c:	08000b45 	.word	0x08000b45
 8000b90:	08000b45 	.word	0x08000b45
 8000b94:	08000b45 	.word	0x08000b45
 8000b98:	08000c8f 	.word	0x08000c8f
 8000b9c:	08000c75 	.word	0x08000c75
 8000ba0:	08000bf7 	.word	0x08000bf7
 8000ba4:	08000bf7 	.word	0x08000bf7
 8000ba8:	08000bf7 	.word	0x08000bf7
 8000bac:	08000b45 	.word	0x08000b45
 8000bb0:	08000c31 	.word	0x08000c31
 8000bb4:	08000b45 	.word	0x08000b45
 8000bb8:	08000b45 	.word	0x08000b45
 8000bbc:	08000b45 	.word	0x08000b45
 8000bc0:	08000b45 	.word	0x08000b45
 8000bc4:	08000c9f 	.word	0x08000c9f
 8000bc8:	08000c39 	.word	0x08000c39
 8000bcc:	08000c17 	.word	0x08000c17
 8000bd0:	08000b45 	.word	0x08000b45
 8000bd4:	08000b45 	.word	0x08000b45
 8000bd8:	08000c9b 	.word	0x08000c9b
 8000bdc:	08000b45 	.word	0x08000b45
 8000be0:	08000c75 	.word	0x08000c75
 8000be4:	08000b45 	.word	0x08000b45
 8000be8:	08000b45 	.word	0x08000b45
 8000bec:	08000c1f 	.word	0x08000c1f
 8000bf0:	3b45      	subs	r3, #69	@ 0x45
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d8a6      	bhi.n	8000b44 <__ssvfiscanf_r+0xec>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e021      	b.n	8000c3e <__ssvfiscanf_r+0x1e6>
 8000bfa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	4630      	mov	r0, r6
 8000c00:	4798      	blx	r3
 8000c02:	2800      	cmp	r0, #0
 8000c04:	f43f af66 	beq.w	8000ad4 <__ssvfiscanf_r+0x7c>
 8000c08:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	f040 808b 	bne.w	8000d26 <__ssvfiscanf_r+0x2ce>
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c14:	e08b      	b.n	8000d2e <__ssvfiscanf_r+0x2d6>
 8000c16:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000c18:	f042 0220 	orr.w	r2, r2, #32
 8000c1c:	9241      	str	r2, [sp, #260]	@ 0x104
 8000c1e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c24:	9241      	str	r2, [sp, #260]	@ 0x104
 8000c26:	2210      	movs	r2, #16
 8000c28:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c2a:	9242      	str	r2, [sp, #264]	@ 0x108
 8000c2c:	d902      	bls.n	8000c34 <__ssvfiscanf_r+0x1dc>
 8000c2e:	e005      	b.n	8000c3c <__ssvfiscanf_r+0x1e4>
 8000c30:	2300      	movs	r3, #0
 8000c32:	9342      	str	r3, [sp, #264]	@ 0x108
 8000c34:	2303      	movs	r3, #3
 8000c36:	e002      	b.n	8000c3e <__ssvfiscanf_r+0x1e6>
 8000c38:	2308      	movs	r3, #8
 8000c3a:	9342      	str	r3, [sp, #264]	@ 0x108
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000c40:	6863      	ldr	r3, [r4, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	dd39      	ble.n	8000cba <__ssvfiscanf_r+0x262>
 8000c46:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000c48:	0659      	lsls	r1, r3, #25
 8000c4a:	d404      	bmi.n	8000c56 <__ssvfiscanf_r+0x1fe>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	5cba      	ldrb	r2, [r7, r2]
 8000c52:	0712      	lsls	r2, r2, #28
 8000c54:	d438      	bmi.n	8000cc8 <__ssvfiscanf_r+0x270>
 8000c56:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	dc47      	bgt.n	8000cec <__ssvfiscanf_r+0x294>
 8000c5c:	466b      	mov	r3, sp
 8000c5e:	4622      	mov	r2, r4
 8000c60:	a941      	add	r1, sp, #260	@ 0x104
 8000c62:	4630      	mov	r0, r6
 8000c64:	f000 f86c 	bl	8000d40 <_scanf_chars>
 8000c68:	2801      	cmp	r0, #1
 8000c6a:	d064      	beq.n	8000d36 <__ssvfiscanf_r+0x2de>
 8000c6c:	2802      	cmp	r0, #2
 8000c6e:	f47f af18 	bne.w	8000aa2 <__ssvfiscanf_r+0x4a>
 8000c72:	e7c9      	b.n	8000c08 <__ssvfiscanf_r+0x1b0>
 8000c74:	220a      	movs	r2, #10
 8000c76:	e7d7      	b.n	8000c28 <__ssvfiscanf_r+0x1d0>
 8000c78:	4629      	mov	r1, r5
 8000c7a:	4640      	mov	r0, r8
 8000c7c:	f000 f9ae 	bl	8000fdc <__sccl>
 8000c80:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c86:	9341      	str	r3, [sp, #260]	@ 0x104
 8000c88:	4605      	mov	r5, r0
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e7d7      	b.n	8000c3e <__ssvfiscanf_r+0x1e6>
 8000c8e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000c90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c94:	9341      	str	r3, [sp, #260]	@ 0x104
 8000c96:	2300      	movs	r3, #0
 8000c98:	e7d1      	b.n	8000c3e <__ssvfiscanf_r+0x1e6>
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	e7cf      	b.n	8000c3e <__ssvfiscanf_r+0x1e6>
 8000c9e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000ca0:	06c3      	lsls	r3, r0, #27
 8000ca2:	f53f aefe 	bmi.w	8000aa2 <__ssvfiscanf_r+0x4a>
 8000ca6:	9b00      	ldr	r3, [sp, #0]
 8000ca8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000caa:	1d19      	adds	r1, r3, #4
 8000cac:	9100      	str	r1, [sp, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	07c0      	lsls	r0, r0, #31
 8000cb2:	bf4c      	ite	mi
 8000cb4:	801a      	strhmi	r2, [r3, #0]
 8000cb6:	601a      	strpl	r2, [r3, #0]
 8000cb8:	e6f3      	b.n	8000aa2 <__ssvfiscanf_r+0x4a>
 8000cba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	4798      	blx	r3
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d0bf      	beq.n	8000c46 <__ssvfiscanf_r+0x1ee>
 8000cc6:	e79f      	b.n	8000c08 <__ssvfiscanf_r+0x1b0>
 8000cc8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000cca:	3201      	adds	r2, #1
 8000ccc:	9245      	str	r2, [sp, #276]	@ 0x114
 8000cce:	6862      	ldr	r2, [r4, #4]
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	6062      	str	r2, [r4, #4]
 8000cd6:	dd02      	ble.n	8000cde <__ssvfiscanf_r+0x286>
 8000cd8:	3301      	adds	r3, #1
 8000cda:	6023      	str	r3, [r4, #0]
 8000cdc:	e7b6      	b.n	8000c4c <__ssvfiscanf_r+0x1f4>
 8000cde:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4798      	blx	r3
 8000ce6:	2800      	cmp	r0, #0
 8000ce8:	d0b0      	beq.n	8000c4c <__ssvfiscanf_r+0x1f4>
 8000cea:	e78d      	b.n	8000c08 <__ssvfiscanf_r+0x1b0>
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	dc0f      	bgt.n	8000d10 <__ssvfiscanf_r+0x2b8>
 8000cf0:	466b      	mov	r3, sp
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	a941      	add	r1, sp, #260	@ 0x104
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	f000 f87c 	bl	8000df4 <_scanf_i>
 8000cfc:	e7b4      	b.n	8000c68 <__ssvfiscanf_r+0x210>
 8000cfe:	bf00      	nop
 8000d00:	080009a9 	.word	0x080009a9
 8000d04:	08000a1f 	.word	0x08000a1f
 8000d08:	08001430 	.word	0x08001430
 8000d0c:	08001410 	.word	0x08001410
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <__ssvfiscanf_r+0x2e4>)
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f43f aec5 	beq.w	8000aa2 <__ssvfiscanf_r+0x4a>
 8000d18:	466b      	mov	r3, sp
 8000d1a:	4622      	mov	r2, r4
 8000d1c:	a941      	add	r1, sp, #260	@ 0x104
 8000d1e:	4630      	mov	r0, r6
 8000d20:	f3af 8000 	nop.w
 8000d24:	e7a0      	b.n	8000c68 <__ssvfiscanf_r+0x210>
 8000d26:	89a3      	ldrh	r3, [r4, #12]
 8000d28:	065b      	lsls	r3, r3, #25
 8000d2a:	f53f af71 	bmi.w	8000c10 <__ssvfiscanf_r+0x1b8>
 8000d2e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000d38:	e7f9      	b.n	8000d2e <__ssvfiscanf_r+0x2d6>
 8000d3a:	bf00      	nop
 8000d3c:	00000000 	.word	0x00000000

08000d40 <_scanf_chars>:
 8000d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d44:	4615      	mov	r5, r2
 8000d46:	688a      	ldr	r2, [r1, #8]
 8000d48:	4680      	mov	r8, r0
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	b932      	cbnz	r2, 8000d5c <_scanf_chars+0x1c>
 8000d4e:	698a      	ldr	r2, [r1, #24]
 8000d50:	2a00      	cmp	r2, #0
 8000d52:	bf14      	ite	ne
 8000d54:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8000d58:	2201      	moveq	r2, #1
 8000d5a:	608a      	str	r2, [r1, #8]
 8000d5c:	6822      	ldr	r2, [r4, #0]
 8000d5e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8000df0 <_scanf_chars+0xb0>
 8000d62:	06d1      	lsls	r1, r2, #27
 8000d64:	bf5f      	itttt	pl
 8000d66:	681a      	ldrpl	r2, [r3, #0]
 8000d68:	1d11      	addpl	r1, r2, #4
 8000d6a:	6019      	strpl	r1, [r3, #0]
 8000d6c:	6816      	ldrpl	r6, [r2, #0]
 8000d6e:	2700      	movs	r7, #0
 8000d70:	69a0      	ldr	r0, [r4, #24]
 8000d72:	b188      	cbz	r0, 8000d98 <_scanf_chars+0x58>
 8000d74:	2801      	cmp	r0, #1
 8000d76:	d107      	bne.n	8000d88 <_scanf_chars+0x48>
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	781a      	ldrb	r2, [r3, #0]
 8000d7c:	6963      	ldr	r3, [r4, #20]
 8000d7e:	5c9b      	ldrb	r3, [r3, r2]
 8000d80:	b953      	cbnz	r3, 8000d98 <_scanf_chars+0x58>
 8000d82:	2f00      	cmp	r7, #0
 8000d84:	d031      	beq.n	8000dea <_scanf_chars+0xaa>
 8000d86:	e022      	b.n	8000dce <_scanf_chars+0x8e>
 8000d88:	2802      	cmp	r0, #2
 8000d8a:	d120      	bne.n	8000dce <_scanf_chars+0x8e>
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f819 3003 	ldrb.w	r3, [r9, r3]
 8000d94:	071b      	lsls	r3, r3, #28
 8000d96:	d41a      	bmi.n	8000dce <_scanf_chars+0x8e>
 8000d98:	6823      	ldr	r3, [r4, #0]
 8000d9a:	06da      	lsls	r2, r3, #27
 8000d9c:	bf5e      	ittt	pl
 8000d9e:	682b      	ldrpl	r3, [r5, #0]
 8000da0:	781b      	ldrbpl	r3, [r3, #0]
 8000da2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8000da6:	682a      	ldr	r2, [r5, #0]
 8000da8:	686b      	ldr	r3, [r5, #4]
 8000daa:	3201      	adds	r2, #1
 8000dac:	602a      	str	r2, [r5, #0]
 8000dae:	68a2      	ldr	r2, [r4, #8]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	3a01      	subs	r2, #1
 8000db4:	606b      	str	r3, [r5, #4]
 8000db6:	3701      	adds	r7, #1
 8000db8:	60a2      	str	r2, [r4, #8]
 8000dba:	b142      	cbz	r2, 8000dce <_scanf_chars+0x8e>
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	dcd7      	bgt.n	8000d70 <_scanf_chars+0x30>
 8000dc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000dc4:	4629      	mov	r1, r5
 8000dc6:	4640      	mov	r0, r8
 8000dc8:	4798      	blx	r3
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d0d0      	beq.n	8000d70 <_scanf_chars+0x30>
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	f013 0310 	ands.w	r3, r3, #16
 8000dd4:	d105      	bne.n	8000de2 <_scanf_chars+0xa2>
 8000dd6:	68e2      	ldr	r2, [r4, #12]
 8000dd8:	3201      	adds	r2, #1
 8000dda:	60e2      	str	r2, [r4, #12]
 8000ddc:	69a2      	ldr	r2, [r4, #24]
 8000dde:	b102      	cbz	r2, 8000de2 <_scanf_chars+0xa2>
 8000de0:	7033      	strb	r3, [r6, #0]
 8000de2:	6923      	ldr	r3, [r4, #16]
 8000de4:	443b      	add	r3, r7
 8000de6:	6123      	str	r3, [r4, #16]
 8000de8:	2000      	movs	r0, #0
 8000dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dee:	bf00      	nop
 8000df0:	08001430 	.word	0x08001430

08000df4 <_scanf_i>:
 8000df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000df8:	4698      	mov	r8, r3
 8000dfa:	4b74      	ldr	r3, [pc, #464]	@ (8000fcc <_scanf_i+0x1d8>)
 8000dfc:	460c      	mov	r4, r1
 8000dfe:	4682      	mov	sl, r0
 8000e00:	4616      	mov	r6, r2
 8000e02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000e06:	b087      	sub	sp, #28
 8000e08:	ab03      	add	r3, sp, #12
 8000e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000e0e:	4b70      	ldr	r3, [pc, #448]	@ (8000fd0 <_scanf_i+0x1dc>)
 8000e10:	69a1      	ldr	r1, [r4, #24]
 8000e12:	4a70      	ldr	r2, [pc, #448]	@ (8000fd4 <_scanf_i+0x1e0>)
 8000e14:	2903      	cmp	r1, #3
 8000e16:	bf08      	it	eq
 8000e18:	461a      	moveq	r2, r3
 8000e1a:	68a3      	ldr	r3, [r4, #8]
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8000e24:	bf88      	it	hi
 8000e26:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8000e2a:	4627      	mov	r7, r4
 8000e2c:	bf82      	ittt	hi
 8000e2e:	eb03 0905 	addhi.w	r9, r3, r5
 8000e32:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8000e36:	60a3      	strhi	r3, [r4, #8]
 8000e38:	f857 3b1c 	ldr.w	r3, [r7], #28
 8000e3c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8000e40:	bf98      	it	ls
 8000e42:	f04f 0900 	movls.w	r9, #0
 8000e46:	6023      	str	r3, [r4, #0]
 8000e48:	463d      	mov	r5, r7
 8000e4a:	f04f 0b00 	mov.w	fp, #0
 8000e4e:	6831      	ldr	r1, [r6, #0]
 8000e50:	ab03      	add	r3, sp, #12
 8000e52:	7809      	ldrb	r1, [r1, #0]
 8000e54:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8000e58:	2202      	movs	r2, #2
 8000e5a:	f7ff f9c1 	bl	80001e0 <memchr>
 8000e5e:	b328      	cbz	r0, 8000eac <_scanf_i+0xb8>
 8000e60:	f1bb 0f01 	cmp.w	fp, #1
 8000e64:	d159      	bne.n	8000f1a <_scanf_i+0x126>
 8000e66:	6862      	ldr	r2, [r4, #4]
 8000e68:	b92a      	cbnz	r2, 8000e76 <_scanf_i+0x82>
 8000e6a:	6822      	ldr	r2, [r4, #0]
 8000e6c:	2108      	movs	r1, #8
 8000e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000e72:	6061      	str	r1, [r4, #4]
 8000e74:	6022      	str	r2, [r4, #0]
 8000e76:	6822      	ldr	r2, [r4, #0]
 8000e78:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8000e7c:	6022      	str	r2, [r4, #0]
 8000e7e:	68a2      	ldr	r2, [r4, #8]
 8000e80:	1e51      	subs	r1, r2, #1
 8000e82:	60a1      	str	r1, [r4, #8]
 8000e84:	b192      	cbz	r2, 8000eac <_scanf_i+0xb8>
 8000e86:	6832      	ldr	r2, [r6, #0]
 8000e88:	1c51      	adds	r1, r2, #1
 8000e8a:	6031      	str	r1, [r6, #0]
 8000e8c:	7812      	ldrb	r2, [r2, #0]
 8000e8e:	f805 2b01 	strb.w	r2, [r5], #1
 8000e92:	6872      	ldr	r2, [r6, #4]
 8000e94:	3a01      	subs	r2, #1
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	6072      	str	r2, [r6, #4]
 8000e9a:	dc07      	bgt.n	8000eac <_scanf_i+0xb8>
 8000e9c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	4650      	mov	r0, sl
 8000ea4:	4790      	blx	r2
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	f040 8085 	bne.w	8000fb6 <_scanf_i+0x1c2>
 8000eac:	f10b 0b01 	add.w	fp, fp, #1
 8000eb0:	f1bb 0f03 	cmp.w	fp, #3
 8000eb4:	d1cb      	bne.n	8000e4e <_scanf_i+0x5a>
 8000eb6:	6863      	ldr	r3, [r4, #4]
 8000eb8:	b90b      	cbnz	r3, 8000ebe <_scanf_i+0xca>
 8000eba:	230a      	movs	r3, #10
 8000ebc:	6063      	str	r3, [r4, #4]
 8000ebe:	6863      	ldr	r3, [r4, #4]
 8000ec0:	4945      	ldr	r1, [pc, #276]	@ (8000fd8 <_scanf_i+0x1e4>)
 8000ec2:	6960      	ldr	r0, [r4, #20]
 8000ec4:	1ac9      	subs	r1, r1, r3
 8000ec6:	f000 f889 	bl	8000fdc <__sccl>
 8000eca:	f04f 0b00 	mov.w	fp, #0
 8000ece:	68a3      	ldr	r3, [r4, #8]
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d03d      	beq.n	8000f52 <_scanf_i+0x15e>
 8000ed6:	6831      	ldr	r1, [r6, #0]
 8000ed8:	6960      	ldr	r0, [r4, #20]
 8000eda:	f891 c000 	ldrb.w	ip, [r1]
 8000ede:	f810 000c 	ldrb.w	r0, [r0, ip]
 8000ee2:	2800      	cmp	r0, #0
 8000ee4:	d035      	beq.n	8000f52 <_scanf_i+0x15e>
 8000ee6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8000eea:	d124      	bne.n	8000f36 <_scanf_i+0x142>
 8000eec:	0510      	lsls	r0, r2, #20
 8000eee:	d522      	bpl.n	8000f36 <_scanf_i+0x142>
 8000ef0:	f10b 0b01 	add.w	fp, fp, #1
 8000ef4:	f1b9 0f00 	cmp.w	r9, #0
 8000ef8:	d003      	beq.n	8000f02 <_scanf_i+0x10e>
 8000efa:	3301      	adds	r3, #1
 8000efc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8000f00:	60a3      	str	r3, [r4, #8]
 8000f02:	6873      	ldr	r3, [r6, #4]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	6073      	str	r3, [r6, #4]
 8000f0a:	dd1b      	ble.n	8000f44 <_scanf_i+0x150>
 8000f0c:	6833      	ldr	r3, [r6, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	6033      	str	r3, [r6, #0]
 8000f12:	68a3      	ldr	r3, [r4, #8]
 8000f14:	3b01      	subs	r3, #1
 8000f16:	60a3      	str	r3, [r4, #8]
 8000f18:	e7d9      	b.n	8000ece <_scanf_i+0xda>
 8000f1a:	f1bb 0f02 	cmp.w	fp, #2
 8000f1e:	d1ae      	bne.n	8000e7e <_scanf_i+0x8a>
 8000f20:	6822      	ldr	r2, [r4, #0]
 8000f22:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8000f26:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8000f2a:	d1bf      	bne.n	8000eac <_scanf_i+0xb8>
 8000f2c:	2110      	movs	r1, #16
 8000f2e:	6061      	str	r1, [r4, #4]
 8000f30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f34:	e7a2      	b.n	8000e7c <_scanf_i+0x88>
 8000f36:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8000f3a:	6022      	str	r2, [r4, #0]
 8000f3c:	780b      	ldrb	r3, [r1, #0]
 8000f3e:	f805 3b01 	strb.w	r3, [r5], #1
 8000f42:	e7de      	b.n	8000f02 <_scanf_i+0x10e>
 8000f44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8000f48:	4631      	mov	r1, r6
 8000f4a:	4650      	mov	r0, sl
 8000f4c:	4798      	blx	r3
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d0df      	beq.n	8000f12 <_scanf_i+0x11e>
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	05d9      	lsls	r1, r3, #23
 8000f56:	d50d      	bpl.n	8000f74 <_scanf_i+0x180>
 8000f58:	42bd      	cmp	r5, r7
 8000f5a:	d909      	bls.n	8000f70 <_scanf_i+0x17c>
 8000f5c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8000f60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8000f64:	4632      	mov	r2, r6
 8000f66:	4650      	mov	r0, sl
 8000f68:	4798      	blx	r3
 8000f6a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8000f6e:	464d      	mov	r5, r9
 8000f70:	42bd      	cmp	r5, r7
 8000f72:	d028      	beq.n	8000fc6 <_scanf_i+0x1d2>
 8000f74:	6822      	ldr	r2, [r4, #0]
 8000f76:	f012 0210 	ands.w	r2, r2, #16
 8000f7a:	d113      	bne.n	8000fa4 <_scanf_i+0x1b0>
 8000f7c:	702a      	strb	r2, [r5, #0]
 8000f7e:	6863      	ldr	r3, [r4, #4]
 8000f80:	9e01      	ldr	r6, [sp, #4]
 8000f82:	4639      	mov	r1, r7
 8000f84:	4650      	mov	r0, sl
 8000f86:	47b0      	blx	r6
 8000f88:	f8d8 3000 	ldr.w	r3, [r8]
 8000f8c:	6821      	ldr	r1, [r4, #0]
 8000f8e:	1d1a      	adds	r2, r3, #4
 8000f90:	f8c8 2000 	str.w	r2, [r8]
 8000f94:	f011 0f20 	tst.w	r1, #32
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	d00f      	beq.n	8000fbc <_scanf_i+0x1c8>
 8000f9c:	6018      	str	r0, [r3, #0]
 8000f9e:	68e3      	ldr	r3, [r4, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60e3      	str	r3, [r4, #12]
 8000fa4:	6923      	ldr	r3, [r4, #16]
 8000fa6:	1bed      	subs	r5, r5, r7
 8000fa8:	445d      	add	r5, fp
 8000faa:	442b      	add	r3, r5
 8000fac:	6123      	str	r3, [r4, #16]
 8000fae:	2000      	movs	r0, #0
 8000fb0:	b007      	add	sp, #28
 8000fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fb6:	f04f 0b00 	mov.w	fp, #0
 8000fba:	e7ca      	b.n	8000f52 <_scanf_i+0x15e>
 8000fbc:	07ca      	lsls	r2, r1, #31
 8000fbe:	bf4c      	ite	mi
 8000fc0:	8018      	strhmi	r0, [r3, #0]
 8000fc2:	6018      	strpl	r0, [r3, #0]
 8000fc4:	e7eb      	b.n	8000f9e <_scanf_i+0x1aa>
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	e7f2      	b.n	8000fb0 <_scanf_i+0x1bc>
 8000fca:	bf00      	nop
 8000fcc:	08001404 	.word	0x08001404
 8000fd0:	08001251 	.word	0x08001251
 8000fd4:	08001331 	.word	0x08001331
 8000fd8:	08001424 	.word	0x08001424

08000fdc <__sccl>:
 8000fdc:	b570      	push	{r4, r5, r6, lr}
 8000fde:	780b      	ldrb	r3, [r1, #0]
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	2b5e      	cmp	r3, #94	@ 0x5e
 8000fe4:	bf0b      	itete	eq
 8000fe6:	784b      	ldrbeq	r3, [r1, #1]
 8000fe8:	1c4a      	addne	r2, r1, #1
 8000fea:	1c8a      	addeq	r2, r1, #2
 8000fec:	2100      	movne	r1, #0
 8000fee:	bf08      	it	eq
 8000ff0:	2101      	moveq	r1, #1
 8000ff2:	3801      	subs	r0, #1
 8000ff4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8000ff8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8000ffc:	42a8      	cmp	r0, r5
 8000ffe:	d1fb      	bne.n	8000ff8 <__sccl+0x1c>
 8001000:	b90b      	cbnz	r3, 8001006 <__sccl+0x2a>
 8001002:	1e50      	subs	r0, r2, #1
 8001004:	bd70      	pop	{r4, r5, r6, pc}
 8001006:	f081 0101 	eor.w	r1, r1, #1
 800100a:	54e1      	strb	r1, [r4, r3]
 800100c:	4610      	mov	r0, r2
 800100e:	4602      	mov	r2, r0
 8001010:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001014:	2d2d      	cmp	r5, #45	@ 0x2d
 8001016:	d005      	beq.n	8001024 <__sccl+0x48>
 8001018:	2d5d      	cmp	r5, #93	@ 0x5d
 800101a:	d016      	beq.n	800104a <__sccl+0x6e>
 800101c:	2d00      	cmp	r5, #0
 800101e:	d0f1      	beq.n	8001004 <__sccl+0x28>
 8001020:	462b      	mov	r3, r5
 8001022:	e7f2      	b.n	800100a <__sccl+0x2e>
 8001024:	7846      	ldrb	r6, [r0, #1]
 8001026:	2e5d      	cmp	r6, #93	@ 0x5d
 8001028:	d0fa      	beq.n	8001020 <__sccl+0x44>
 800102a:	42b3      	cmp	r3, r6
 800102c:	dcf8      	bgt.n	8001020 <__sccl+0x44>
 800102e:	3002      	adds	r0, #2
 8001030:	461a      	mov	r2, r3
 8001032:	3201      	adds	r2, #1
 8001034:	4296      	cmp	r6, r2
 8001036:	54a1      	strb	r1, [r4, r2]
 8001038:	dcfb      	bgt.n	8001032 <__sccl+0x56>
 800103a:	1af2      	subs	r2, r6, r3
 800103c:	3a01      	subs	r2, #1
 800103e:	1c5d      	adds	r5, r3, #1
 8001040:	42b3      	cmp	r3, r6
 8001042:	bfa8      	it	ge
 8001044:	2200      	movge	r2, #0
 8001046:	18ab      	adds	r3, r5, r2
 8001048:	e7e1      	b.n	800100e <__sccl+0x32>
 800104a:	4610      	mov	r0, r2
 800104c:	e7da      	b.n	8001004 <__sccl+0x28>

0800104e <__submore>:
 800104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001052:	460c      	mov	r4, r1
 8001054:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001056:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800105a:	4299      	cmp	r1, r3
 800105c:	d11d      	bne.n	800109a <__submore+0x4c>
 800105e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001062:	f7ff fc15 	bl	8000890 <_malloc_r>
 8001066:	b918      	cbnz	r0, 8001070 <__submore+0x22>
 8001068:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001070:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001074:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001076:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800107a:	6360      	str	r0, [r4, #52]	@ 0x34
 800107c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8001080:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8001084:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8001088:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800108c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8001090:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8001094:	6020      	str	r0, [r4, #0]
 8001096:	2000      	movs	r0, #0
 8001098:	e7e8      	b.n	800106c <__submore+0x1e>
 800109a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800109c:	0077      	lsls	r7, r6, #1
 800109e:	463a      	mov	r2, r7
 80010a0:	f000 f82e 	bl	8001100 <_realloc_r>
 80010a4:	4605      	mov	r5, r0
 80010a6:	2800      	cmp	r0, #0
 80010a8:	d0de      	beq.n	8001068 <__submore+0x1a>
 80010aa:	eb00 0806 	add.w	r8, r0, r6
 80010ae:	4601      	mov	r1, r0
 80010b0:	4632      	mov	r2, r6
 80010b2:	4640      	mov	r0, r8
 80010b4:	f000 f816 	bl	80010e4 <memcpy>
 80010b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80010bc:	f8c4 8000 	str.w	r8, [r4]
 80010c0:	e7e9      	b.n	8001096 <__submore+0x48>
	...

080010c4 <_sbrk_r>:
 80010c4:	b538      	push	{r3, r4, r5, lr}
 80010c6:	4d06      	ldr	r5, [pc, #24]	@ (80010e0 <_sbrk_r+0x1c>)
 80010c8:	2300      	movs	r3, #0
 80010ca:	4604      	mov	r4, r0
 80010cc:	4608      	mov	r0, r1
 80010ce:	602b      	str	r3, [r5, #0]
 80010d0:	f7ff f9b4 	bl	800043c <_sbrk>
 80010d4:	1c43      	adds	r3, r0, #1
 80010d6:	d102      	bne.n	80010de <_sbrk_r+0x1a>
 80010d8:	682b      	ldr	r3, [r5, #0]
 80010da:	b103      	cbz	r3, 80010de <_sbrk_r+0x1a>
 80010dc:	6023      	str	r3, [r4, #0]
 80010de:	bd38      	pop	{r3, r4, r5, pc}
 80010e0:	200001a8 	.word	0x200001a8

080010e4 <memcpy>:
 80010e4:	440a      	add	r2, r1
 80010e6:	4291      	cmp	r1, r2
 80010e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80010ec:	d100      	bne.n	80010f0 <memcpy+0xc>
 80010ee:	4770      	bx	lr
 80010f0:	b510      	push	{r4, lr}
 80010f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80010fa:	4291      	cmp	r1, r2
 80010fc:	d1f9      	bne.n	80010f2 <memcpy+0xe>
 80010fe:	bd10      	pop	{r4, pc}

08001100 <_realloc_r>:
 8001100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001104:	4680      	mov	r8, r0
 8001106:	4615      	mov	r5, r2
 8001108:	460c      	mov	r4, r1
 800110a:	b921      	cbnz	r1, 8001116 <_realloc_r+0x16>
 800110c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001110:	4611      	mov	r1, r2
 8001112:	f7ff bbbd 	b.w	8000890 <_malloc_r>
 8001116:	b92a      	cbnz	r2, 8001124 <_realloc_r+0x24>
 8001118:	f7ff fb4e 	bl	80007b8 <_free_r>
 800111c:	2400      	movs	r4, #0
 800111e:	4620      	mov	r0, r4
 8001120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001124:	f000 f906 	bl	8001334 <_malloc_usable_size_r>
 8001128:	4285      	cmp	r5, r0
 800112a:	4606      	mov	r6, r0
 800112c:	d802      	bhi.n	8001134 <_realloc_r+0x34>
 800112e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001132:	d8f4      	bhi.n	800111e <_realloc_r+0x1e>
 8001134:	4629      	mov	r1, r5
 8001136:	4640      	mov	r0, r8
 8001138:	f7ff fbaa 	bl	8000890 <_malloc_r>
 800113c:	4607      	mov	r7, r0
 800113e:	2800      	cmp	r0, #0
 8001140:	d0ec      	beq.n	800111c <_realloc_r+0x1c>
 8001142:	42b5      	cmp	r5, r6
 8001144:	462a      	mov	r2, r5
 8001146:	4621      	mov	r1, r4
 8001148:	bf28      	it	cs
 800114a:	4632      	movcs	r2, r6
 800114c:	f7ff ffca 	bl	80010e4 <memcpy>
 8001150:	4621      	mov	r1, r4
 8001152:	4640      	mov	r0, r8
 8001154:	f7ff fb30 	bl	80007b8 <_free_r>
 8001158:	463c      	mov	r4, r7
 800115a:	e7e0      	b.n	800111e <_realloc_r+0x1e>

0800115c <_strtol_l.constprop.0>:
 800115c:	2b24      	cmp	r3, #36	@ 0x24
 800115e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001162:	4686      	mov	lr, r0
 8001164:	4690      	mov	r8, r2
 8001166:	d801      	bhi.n	800116c <_strtol_l.constprop.0+0x10>
 8001168:	2b01      	cmp	r3, #1
 800116a:	d106      	bne.n	800117a <_strtol_l.constprop.0+0x1e>
 800116c:	f7ff faf8 	bl	8000760 <__errno>
 8001170:	2316      	movs	r3, #22
 8001172:	6003      	str	r3, [r0, #0]
 8001174:	2000      	movs	r0, #0
 8001176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117a:	4834      	ldr	r0, [pc, #208]	@ (800124c <_strtol_l.constprop.0+0xf0>)
 800117c:	460d      	mov	r5, r1
 800117e:	462a      	mov	r2, r5
 8001180:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001184:	5d06      	ldrb	r6, [r0, r4]
 8001186:	f016 0608 	ands.w	r6, r6, #8
 800118a:	d1f8      	bne.n	800117e <_strtol_l.constprop.0+0x22>
 800118c:	2c2d      	cmp	r4, #45	@ 0x2d
 800118e:	d12d      	bne.n	80011ec <_strtol_l.constprop.0+0x90>
 8001190:	782c      	ldrb	r4, [r5, #0]
 8001192:	2601      	movs	r6, #1
 8001194:	1c95      	adds	r5, r2, #2
 8001196:	f033 0210 	bics.w	r2, r3, #16
 800119a:	d109      	bne.n	80011b0 <_strtol_l.constprop.0+0x54>
 800119c:	2c30      	cmp	r4, #48	@ 0x30
 800119e:	d12a      	bne.n	80011f6 <_strtol_l.constprop.0+0x9a>
 80011a0:	782a      	ldrb	r2, [r5, #0]
 80011a2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80011a6:	2a58      	cmp	r2, #88	@ 0x58
 80011a8:	d125      	bne.n	80011f6 <_strtol_l.constprop.0+0x9a>
 80011aa:	786c      	ldrb	r4, [r5, #1]
 80011ac:	2310      	movs	r3, #16
 80011ae:	3502      	adds	r5, #2
 80011b0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80011b4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80011b8:	2200      	movs	r2, #0
 80011ba:	fbbc f9f3 	udiv	r9, ip, r3
 80011be:	4610      	mov	r0, r2
 80011c0:	fb03 ca19 	mls	sl, r3, r9, ip
 80011c4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80011c8:	2f09      	cmp	r7, #9
 80011ca:	d81b      	bhi.n	8001204 <_strtol_l.constprop.0+0xa8>
 80011cc:	463c      	mov	r4, r7
 80011ce:	42a3      	cmp	r3, r4
 80011d0:	dd27      	ble.n	8001222 <_strtol_l.constprop.0+0xc6>
 80011d2:	1c57      	adds	r7, r2, #1
 80011d4:	d007      	beq.n	80011e6 <_strtol_l.constprop.0+0x8a>
 80011d6:	4581      	cmp	r9, r0
 80011d8:	d320      	bcc.n	800121c <_strtol_l.constprop.0+0xc0>
 80011da:	d101      	bne.n	80011e0 <_strtol_l.constprop.0+0x84>
 80011dc:	45a2      	cmp	sl, r4
 80011de:	db1d      	blt.n	800121c <_strtol_l.constprop.0+0xc0>
 80011e0:	fb00 4003 	mla	r0, r0, r3, r4
 80011e4:	2201      	movs	r2, #1
 80011e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80011ea:	e7eb      	b.n	80011c4 <_strtol_l.constprop.0+0x68>
 80011ec:	2c2b      	cmp	r4, #43	@ 0x2b
 80011ee:	bf04      	itt	eq
 80011f0:	782c      	ldrbeq	r4, [r5, #0]
 80011f2:	1c95      	addeq	r5, r2, #2
 80011f4:	e7cf      	b.n	8001196 <_strtol_l.constprop.0+0x3a>
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1da      	bne.n	80011b0 <_strtol_l.constprop.0+0x54>
 80011fa:	2c30      	cmp	r4, #48	@ 0x30
 80011fc:	bf0c      	ite	eq
 80011fe:	2308      	moveq	r3, #8
 8001200:	230a      	movne	r3, #10
 8001202:	e7d5      	b.n	80011b0 <_strtol_l.constprop.0+0x54>
 8001204:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8001208:	2f19      	cmp	r7, #25
 800120a:	d801      	bhi.n	8001210 <_strtol_l.constprop.0+0xb4>
 800120c:	3c37      	subs	r4, #55	@ 0x37
 800120e:	e7de      	b.n	80011ce <_strtol_l.constprop.0+0x72>
 8001210:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8001214:	2f19      	cmp	r7, #25
 8001216:	d804      	bhi.n	8001222 <_strtol_l.constprop.0+0xc6>
 8001218:	3c57      	subs	r4, #87	@ 0x57
 800121a:	e7d8      	b.n	80011ce <_strtol_l.constprop.0+0x72>
 800121c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001220:	e7e1      	b.n	80011e6 <_strtol_l.constprop.0+0x8a>
 8001222:	1c53      	adds	r3, r2, #1
 8001224:	d108      	bne.n	8001238 <_strtol_l.constprop.0+0xdc>
 8001226:	2322      	movs	r3, #34	@ 0x22
 8001228:	f8ce 3000 	str.w	r3, [lr]
 800122c:	4660      	mov	r0, ip
 800122e:	f1b8 0f00 	cmp.w	r8, #0
 8001232:	d0a0      	beq.n	8001176 <_strtol_l.constprop.0+0x1a>
 8001234:	1e69      	subs	r1, r5, #1
 8001236:	e006      	b.n	8001246 <_strtol_l.constprop.0+0xea>
 8001238:	b106      	cbz	r6, 800123c <_strtol_l.constprop.0+0xe0>
 800123a:	4240      	negs	r0, r0
 800123c:	f1b8 0f00 	cmp.w	r8, #0
 8001240:	d099      	beq.n	8001176 <_strtol_l.constprop.0+0x1a>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d1f6      	bne.n	8001234 <_strtol_l.constprop.0+0xd8>
 8001246:	f8c8 1000 	str.w	r1, [r8]
 800124a:	e794      	b.n	8001176 <_strtol_l.constprop.0+0x1a>
 800124c:	08001430 	.word	0x08001430

08001250 <_strtol_r>:
 8001250:	f7ff bf84 	b.w	800115c <_strtol_l.constprop.0>

08001254 <_strtoul_l.constprop.0>:
 8001254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001258:	4e34      	ldr	r6, [pc, #208]	@ (800132c <_strtoul_l.constprop.0+0xd8>)
 800125a:	4686      	mov	lr, r0
 800125c:	460d      	mov	r5, r1
 800125e:	4628      	mov	r0, r5
 8001260:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001264:	5d37      	ldrb	r7, [r6, r4]
 8001266:	f017 0708 	ands.w	r7, r7, #8
 800126a:	d1f8      	bne.n	800125e <_strtoul_l.constprop.0+0xa>
 800126c:	2c2d      	cmp	r4, #45	@ 0x2d
 800126e:	d12f      	bne.n	80012d0 <_strtoul_l.constprop.0+0x7c>
 8001270:	782c      	ldrb	r4, [r5, #0]
 8001272:	2701      	movs	r7, #1
 8001274:	1c85      	adds	r5, r0, #2
 8001276:	f033 0010 	bics.w	r0, r3, #16
 800127a:	d109      	bne.n	8001290 <_strtoul_l.constprop.0+0x3c>
 800127c:	2c30      	cmp	r4, #48	@ 0x30
 800127e:	d12c      	bne.n	80012da <_strtoul_l.constprop.0+0x86>
 8001280:	7828      	ldrb	r0, [r5, #0]
 8001282:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001286:	2858      	cmp	r0, #88	@ 0x58
 8001288:	d127      	bne.n	80012da <_strtoul_l.constprop.0+0x86>
 800128a:	786c      	ldrb	r4, [r5, #1]
 800128c:	2310      	movs	r3, #16
 800128e:	3502      	adds	r5, #2
 8001290:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001294:	2600      	movs	r6, #0
 8001296:	fbb8 f8f3 	udiv	r8, r8, r3
 800129a:	fb03 f908 	mul.w	r9, r3, r8
 800129e:	ea6f 0909 	mvn.w	r9, r9
 80012a2:	4630      	mov	r0, r6
 80012a4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80012a8:	f1bc 0f09 	cmp.w	ip, #9
 80012ac:	d81c      	bhi.n	80012e8 <_strtoul_l.constprop.0+0x94>
 80012ae:	4664      	mov	r4, ip
 80012b0:	42a3      	cmp	r3, r4
 80012b2:	dd2a      	ble.n	800130a <_strtoul_l.constprop.0+0xb6>
 80012b4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80012b8:	d007      	beq.n	80012ca <_strtoul_l.constprop.0+0x76>
 80012ba:	4580      	cmp	r8, r0
 80012bc:	d322      	bcc.n	8001304 <_strtoul_l.constprop.0+0xb0>
 80012be:	d101      	bne.n	80012c4 <_strtoul_l.constprop.0+0x70>
 80012c0:	45a1      	cmp	r9, r4
 80012c2:	db1f      	blt.n	8001304 <_strtoul_l.constprop.0+0xb0>
 80012c4:	fb00 4003 	mla	r0, r0, r3, r4
 80012c8:	2601      	movs	r6, #1
 80012ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80012ce:	e7e9      	b.n	80012a4 <_strtoul_l.constprop.0+0x50>
 80012d0:	2c2b      	cmp	r4, #43	@ 0x2b
 80012d2:	bf04      	itt	eq
 80012d4:	782c      	ldrbeq	r4, [r5, #0]
 80012d6:	1c85      	addeq	r5, r0, #2
 80012d8:	e7cd      	b.n	8001276 <_strtoul_l.constprop.0+0x22>
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1d8      	bne.n	8001290 <_strtoul_l.constprop.0+0x3c>
 80012de:	2c30      	cmp	r4, #48	@ 0x30
 80012e0:	bf0c      	ite	eq
 80012e2:	2308      	moveq	r3, #8
 80012e4:	230a      	movne	r3, #10
 80012e6:	e7d3      	b.n	8001290 <_strtoul_l.constprop.0+0x3c>
 80012e8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80012ec:	f1bc 0f19 	cmp.w	ip, #25
 80012f0:	d801      	bhi.n	80012f6 <_strtoul_l.constprop.0+0xa2>
 80012f2:	3c37      	subs	r4, #55	@ 0x37
 80012f4:	e7dc      	b.n	80012b0 <_strtoul_l.constprop.0+0x5c>
 80012f6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80012fa:	f1bc 0f19 	cmp.w	ip, #25
 80012fe:	d804      	bhi.n	800130a <_strtoul_l.constprop.0+0xb6>
 8001300:	3c57      	subs	r4, #87	@ 0x57
 8001302:	e7d5      	b.n	80012b0 <_strtoul_l.constprop.0+0x5c>
 8001304:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8001308:	e7df      	b.n	80012ca <_strtoul_l.constprop.0+0x76>
 800130a:	1c73      	adds	r3, r6, #1
 800130c:	d106      	bne.n	800131c <_strtoul_l.constprop.0+0xc8>
 800130e:	2322      	movs	r3, #34	@ 0x22
 8001310:	f8ce 3000 	str.w	r3, [lr]
 8001314:	4630      	mov	r0, r6
 8001316:	b932      	cbnz	r2, 8001326 <_strtoul_l.constprop.0+0xd2>
 8001318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800131c:	b107      	cbz	r7, 8001320 <_strtoul_l.constprop.0+0xcc>
 800131e:	4240      	negs	r0, r0
 8001320:	2a00      	cmp	r2, #0
 8001322:	d0f9      	beq.n	8001318 <_strtoul_l.constprop.0+0xc4>
 8001324:	b106      	cbz	r6, 8001328 <_strtoul_l.constprop.0+0xd4>
 8001326:	1e69      	subs	r1, r5, #1
 8001328:	6011      	str	r1, [r2, #0]
 800132a:	e7f5      	b.n	8001318 <_strtoul_l.constprop.0+0xc4>
 800132c:	08001430 	.word	0x08001430

08001330 <_strtoul_r>:
 8001330:	f7ff bf90 	b.w	8001254 <_strtoul_l.constprop.0>

08001334 <_malloc_usable_size_r>:
 8001334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001338:	1f18      	subs	r0, r3, #4
 800133a:	2b00      	cmp	r3, #0
 800133c:	bfbc      	itt	lt
 800133e:	580b      	ldrlt	r3, [r1, r0]
 8001340:	18c0      	addlt	r0, r0, r3
 8001342:	4770      	bx	lr

08001344 <_init>:
 8001344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001346:	bf00      	nop
 8001348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800134a:	bc08      	pop	{r3}
 800134c:	469e      	mov	lr, r3
 800134e:	4770      	bx	lr

08001350 <_fini>:
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001352:	bf00      	nop
 8001354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001356:	bc08      	pop	{r3}
 8001358:	469e      	mov	lr, r3
 800135a:	4770      	bx	lr
